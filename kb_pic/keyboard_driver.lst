gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 2-25-2010  00:38:49
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;-------------------------------------------------------------------------------
                                           ;
                                           ; main.asm - PS/2 Keyboard driver and buffer firmware for Z80 Project Mark 2
                                           ; File Version 1.0 - 5 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;-------------------------------------------------------------------------------
                                           
                                           list p=18f4520
                                           include <p18f4520.inc>
                                                   LIST
                                           
                                           ;==========================================================================
                                           ;  MPASM PIC18F4520 processor include
                                           ; 
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                                           ;==========================================================================
                                           
                                                   NOLIST
                                           include <scancodes.inc>
                                           CC_0		equ 0x00
                                           CC_1		equ 0x01
                                           CC_2		equ 0x02
                                           CC_3		equ 0x03
                                           CC_4		equ 0x04
                                           CC_5		equ 0x05
                                           CC_6		equ 0x06
                                           CC_7		equ 0x07
                                           CC_8		equ 0x08
                                           CC_9		equ 0x09
                                           CC_A		equ 0x0A
                                           CC_B		equ 0x0B
                                           CC_C		equ 0x0C
                                           CC_D		equ 0x0D
                                           CC_E		equ 0x0E
                                           CC_F		equ 0x0F
                                           CC_G		equ 0x10
                                           CC_H		equ 0x11
                                           CC_I		equ 0x12
                                           CC_J		equ 0x13
                                           CC_K		equ 0x14
                                           CC_L		equ 0x15
                                           CC_M		equ 0x16
                                           CC_N		equ 0x17
                                           CC_O		equ 0x18
                                           CC_P		equ 0x19
                                           CC_Q		equ 0x1A
                                           CC_R		equ 0x1B
                                           CC_S		equ 0x1C
                                           CC_T		equ 0x1D
                                           CC_U		equ 0x1E
                                           CC_V		equ 0x1F
                                           CC_W		equ 0x20
                                           CC_X		equ 0x21
                                           CC_Y		equ 0x22
                                           CC_Z		equ 0x23
                                           CC_LQ		equ 0x24	;`
                                           CC_DSH		equ 0x25        ;-
                                           CC_EQ		equ 0x26	;=
                                           CC_LSB		equ 0x27        ;[
                                           CC_RSB		equ 0x28        ;]
                                           CC_AP		equ 0x29	;'
                                           CC_CM		equ 0x2A	;,
                                           CC_FS		equ 0x2B	;.
                                           CC_WS		equ 0x2C	;\
                                           CC_US		equ 0x2D	;/
                                           CC_SC		equ 0x2E	;;
                                           CC_SP		equ 0x2F	;SPACE
                                           CC_TAB		equ 0x30	;TAB
                                           CC_ENTER	equ 0x31	;ENTER
                                           CC_KPE          equ 0x32        ;Key pad ENTER
                                           CC_DEL		equ 0x33	;DELETE
                                           CC_BKSP		equ 0x34	;BACKSPACE
                                           
                                           CC_ESC		equ 0x80	;ESCAPE
                                           CC_F1		equ 0x81
                                           CC_F2		equ 0x82
                                           CC_F3		equ 0x83
                                           CC_F4		equ 0x84
                                           CC_F5		equ 0x85
                                           CC_F6		equ 0x86
                                           CC_F7		equ 0x87
                                           CC_F8		equ 0x88
                                           CC_F9		equ 0x89
                                           CC_F10		equ 0x8A
                                           CC_F11		equ 0x8B
                                           CC_F12		equ 0x8C
                                           CC_PRINT	equ 0x8D
                                           CC_SCROLL	equ 0x8E
                                           CC_PAUSE	equ 0x8F
                                           CC_NUM		equ 0x90
                                           CC_CAPS		equ 0x91
                                           CC_LSHIFT       equ 0x92
                                           CC_RSHIFT       equ 0x93
                                           CC_CTRL		equ 0x94
                                           CC_CTRLR        equ 0x95
                                           CC_ALT		equ 0x96
                                           CC_ALTR         equ 0x97
                                           CC_GUIL		equ 0x98
                                           CC_GUIR		equ 0x99
                                           CC_APPS		equ 0x9A
                                           CC_INS          equ 0x9B
                                           CC_HOME         equ 0x9C
                                           CC_END          equ 0x9D
                                           CC_PGUP         equ 0x9E
                                           CC_PGDN         equ 0x9F
                                           CC_PSF          equ 0xA0
                                           CC_PSR          equ 0xA1
                                           ; A3 is Â£ symbol in character set, don't use it here
                                           CC_LEFT         equ 0xA4
                                           CC_RIGHT        equ 0xA5
                                           CC_UP           equ 0xA6
                                           CC_DOWN         equ 0xA7
                                           ; media keys
                                           CC_MNXT         equ 0xA7        ; media next
                                           CC_MPRV         equ 0xA8        ; media previous
                                           CC_MPP          equ 0xA9        ; media play/pause
                                           CC_MSTP         equ 0xAA        ; media stop
                                           CC_MMT          equ 0xAB        ; media mute
                                           CC_MVU          equ 0xAC        ; media volume up
                                           CC_MVD          equ 0xAD        ; media volume down
                                           CC_MSL          equ 0xAE        ; media select
                                           CC_MEM          equ 0xAF        ; media email
                                           ; B0 is the degrees symbol, mapped to a key
                                           CC_MCLC         equ 0xB1        ; media calculator
                                           CC_MCMP         equ 0xB2        ; media my computer
                                           CC_MSRCH        equ 0xB3        ; media web search
                                           CC_MHOME        equ 0xB4        ; media web home
                                           CC_MBCK         equ 0xB5        ; media web back
                                           CC_MFWD         equ 0xB6        ; media web forward
                                           CC_MWSP         equ 0xB7        ; media web stop
                                           CC_MRFSH        equ 0xB8        ; media web refresh
                                           CC_MFV          equ 0xB9        ; media web favourites
                                           ; acpi control codes
                                           CC_PWR          equ 0xBA        ; power
                                           CC_SLP          equ 0xBB        ; sleep
                                           CC_WK           equ 0xBC        ; wake
                                           
                                           CC_KP0		equ 0xC0
                                           CC_KP1		equ 0xC1
                                           CC_KP2		equ 0xC2
                                           CC_KP3		equ 0xC3
                                           CC_KP4		equ 0xC4
                                           CC_KP5		equ 0xC5
                                           CC_KP6		equ 0xC6
                                           CC_KP7		equ 0xC7
                                           CC_KP8		equ 0xC8
                                           CC_KP9		equ 0xC9
                                           CC_KPD		equ 0xCA	;.
                                           CC_KPS		equ 0xCB	;*
                                           CC_KPP		equ 0xCC	;+
                                           CC_KPM		equ 0xCD	;-
                                           CC_KPSL         equ 0xCE        ;/
                                           include <portpins.inc>
                                           ;== PORT Definitions ==========================================================
                                           
                                           ;-- PORT A --------------------------------------------------------------------
                                           
                                           P_READY         EQU     0
                                           P_FOUND         EQU     1
                                           P_INT           EQU     5
                                           
                                           PORTADEF        EQU     b'00100011'
                                           PORTADIR        EQU     b'11011100'
                                           
                                           ;-- PORT B --------------------------------------------------------------------
                                           
                                           PORTBDEF        EQU     b'00000000'
                                           PORTBDIR        EQU     b'01111111'
                                           
                                           ;-- PORT C --------------------------------------------------------------------
                                           
                                           P_TX            EQU     6
                                           P_RX            EQU     7
                                           
                                           PORTCDEF        EQU     b'00000000'
                                           PORTCDIR        EQU     b'11111111'
                                           
                                           ;-- PORT E --------------------------------------------------------------------
                                           
                                           P_RD            EQU     0
                                           P_WR            EQU     1
                                           P_CS            EQU     2
                                           
                                           PORTEDIR        EQU     b'00010111'
                                           PORTEDEF        EQU     b'00000000'
                                           
                                           ;-- ADC PINS -------------------------------------------------------------------
                                           
                                           ADCONDEF        EQU     b'00001111'
                                           
                                           ;== FLAG BIT DEFINITIONS =======================================================
                                           
                                           ; flags
                                           scroll_flag             equ     0
                                           num_flag                equ     1
                                           caps_flag               equ     2
                                           shift_flag              equ     3
                                           release_flag            equ     4
                                           talking_flag            equ     5
                                           send_failed_flag        equ     6
                                           special_flag            equ     7
                                           
                                           ; txflags
                                           ack_flag                equ     0
                                           resend_flag             equ     1
                                           pause_flag              equ     2
                                           send_release_flag       equ     3
                                           send_command_release_flag       equ     4
                                           
                                           errorlevel -302
                                           errorlevel -205
                                           
                                           CONFIG OSC = HSPLL
                                           CONFIG FCMEN = ON, IESO = OFF, PWRT = ON, BOREN = OFF, BORV = 0
                                           CONFIG WDT = OFF, WDTPS = 1, MCLRE = ON, LPT1OSC = OFF
                                           CONFIG PBADEN = OFF, CCP2MX = PORTC, STVREN = ON, LVP = OFF
                                           CONFIG XINST = OFF, DEBUG = OFF, CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                                           CONFIG CPB = OFF, CPD = OFF, WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                                           CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF, EBTR0 = OFF, EBTR1 = OFF
                                           CONFIG EBTR2 = OFF, EBTR3 = OFF, EBTRB = OFF
                                           
                                           ;-- Externals from hostbus.asm -------------------------------------------------
                                           
                                               EXTERN      hostbus_init
                                               EXTERN      hostbus_int
                                           ;     EXTERN      hostbus_push
                                           
                                           ;-- Externals from ps2.asm -----------------------------------------------------
                                           
                                               EXTERN      ps2_init
                                               EXTERN      ps2_keyboard_init
                                               EXTERN      ps2_timer_int
                                               EXTERN      ps2_edge_int
                                               EXTERN      ps2_send_bytes
                                           
                                               EXTERN      flags
                                           
                                           ;-- Externals from translation.asm ---------------------------------------------
                                           
                                           ;     EXTERN      translate_key
                                               EXTERN      translate_init
                                           
                                           UDATA
                                           
                                           org 0x00
000000   ef16     goto	0x2c                    goto        init
000002   f000
                                           
                                           org 0x08
                                           interrupt
000008   be9e     btfsc	0x9e, 0x7, 0         btfsc         PIR1, PSPIF
00000a   ef0c     goto	0x18                  goto          psp_int
00000c   f000
00000e   b4f2     btfsc	0xf2, 0x2, 0         btfsc         INTCON, TMR0IF
000010   ef0f     goto	0x1e                  goto          tmr0_int
000012   f000
000014   ef12     goto	0x24                  goto          int0_int
000016   f000
                                           
                                           psp_int
000018   ec45     call	0x68a, 0              call          hostbus_int             ; see hostbus.asm for details
00001a   f003
00001c   d006     bra	0x2a                   bra           exit_interrupt
                                           
                                           tmr0_int
00001e   eca4     call	0x548, 0              call          ps2_timer_int
000020   f002
000022   d003     bra	0x2a                   bra           exit_interrupt
                                           
                                           int0_int
000024   ecc5     call	0x58a, 0              call          ps2_edge_int
000026   f002
000028   d000     bra	0x2a                   bra           exit_interrupt
                                           
                                           exit_interrupt
00002a   0011     retfie	0x1                 retfie        FAST
                                           
                                           ; == End of Interrupt code ====================================================
                                           
                                           init
00002c   0e0f     movlw	0xf                  movlw         ADCONDEF
00002e   6ec1     movwf	0xc1, 0              movwf         ADCON1          ; no adc pins
                                           
000030   0e23     movlw	0x23                 movlw         PORTADEF
000032   6e89     movwf	0x89, 0              movwf         LATA
000034   0edc     movlw	0xdc                 movlw         PORTADIR
000036   6e92     movwf	0x92, 0              movwf         TRISA
                                           
000038   0e00     movlw	0                    movlw         PORTBDEF
00003a   6e8a     movwf	0x8a, 0              movwf         LATB
00003c   0e7f     movlw	0x7f                 movlw         PORTBDIR
00003e   6e93     movwf	0x93, 0              movwf         TRISB
                                           
000040   0e00     movlw	0                    movlw         PORTCDEF
000042   6e8b     movwf	0x8b, 0              movwf         LATC
000044   0eff     movlw	0xff                 movlw         PORTCDIR
000046   6e94     movwf	0x94, 0              movwf         TRISC
                                           
                                             ; don't need to set up port D because it is controlled by the PSP mode bits
                                             ; in TRISE
                                           
000048   0e00     movlw	0                    movlw         PORTEDEF
00004a   6e8d     movwf	0x8d, 0              movwf         LATE
00004c   0e17     movlw	0x17                 movlw         PORTEDIR
00004e   6e96     movwf	0x96, 0              movwf         TRISE
                                           
000050   ec3d     call	0x67a, 0              call          hostbus_init            ; setup the PSP
000052   f003
000054   ec70     call	0x4e0, 0              call          ps2_init                ; setup interrupts
000056   f002
000058   ecff     call	0x1fe, 0              call          translate_init
00005a   f000
                                           
00005c   8cf2     bsf	0xf2, 0x6, 0           bsf           INTCON, PEIE            ; enable interrupts
00005e   8ef2     bsf	0xf2, 0x7, 0           bsf           INTCON, GIE
                                              
000060   9089     bcf	0x89, 0, 0             bcf           LATA, P_READY           ; clear the ready bit
                                           
000062   ec85     call	0x50a, 0              call          ps2_keyboard_init       ; wait for keyboard to start up
000064   f002
                                           
                                           main
000066   ec1e     call	0x63c, 0              call          ps2_send_bytes
000068   f003
00006a   d7fd     bra	0x66                   bra           main
                                           
                                           end
                                           ;-------------------------------------------------------------------------------
                                           ;
                                           ; asciicodes.asm - lookup table routines to give ASCII from ndcodes
                                           ; File Version 1.0 - 23 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;-------------------------------------------------------------------------------
                                           
                                           list p=18f4520
                                           include <p18f4520.inc>
                                                   LIST
                                           
                                           ;==========================================================================
                                           ;  MPASM PIC18F4520 processor include
                                           ; 
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                                           ;==========================================================================
                                           
                                                   NOLIST
                                           include scancodes.inc
                                           CC_0		equ 0x00
                                           CC_1		equ 0x01
                                           CC_2		equ 0x02
                                           CC_3		equ 0x03
                                           CC_4		equ 0x04
                                           CC_5		equ 0x05
                                           CC_6		equ 0x06
                                           CC_7		equ 0x07
                                           CC_8		equ 0x08
                                           CC_9		equ 0x09
                                           CC_A		equ 0x0A
                                           CC_B		equ 0x0B
                                           CC_C		equ 0x0C
                                           CC_D		equ 0x0D
                                           CC_E		equ 0x0E
                                           CC_F		equ 0x0F
                                           CC_G		equ 0x10
                                           CC_H		equ 0x11
                                           CC_I		equ 0x12
                                           CC_J		equ 0x13
                                           CC_K		equ 0x14
                                           CC_L		equ 0x15
                                           CC_M		equ 0x16
                                           CC_N		equ 0x17
                                           CC_O		equ 0x18
                                           CC_P		equ 0x19
                                           CC_Q		equ 0x1A
                                           CC_R		equ 0x1B
                                           CC_S		equ 0x1C
                                           CC_T		equ 0x1D
                                           CC_U		equ 0x1E
                                           CC_V		equ 0x1F
                                           CC_W		equ 0x20
                                           CC_X		equ 0x21
                                           CC_Y		equ 0x22
                                           CC_Z		equ 0x23
                                           CC_LQ		equ 0x24	;`
                                           CC_DSH		equ 0x25        ;-
                                           CC_EQ		equ 0x26	;=
                                           CC_LSB		equ 0x27        ;[
                                           CC_RSB		equ 0x28        ;]
                                           CC_AP		equ 0x29	;'
                                           CC_CM		equ 0x2A	;,
                                           CC_FS		equ 0x2B	;.
                                           CC_WS		equ 0x2C	;\
                                           CC_US		equ 0x2D	;/
                                           CC_SC		equ 0x2E	;;
                                           CC_SP		equ 0x2F	;SPACE
                                           CC_TAB		equ 0x30	;TAB
                                           CC_ENTER	equ 0x31	;ENTER
                                           CC_KPE          equ 0x32        ;Key pad ENTER
                                           CC_DEL		equ 0x33	;DELETE
                                           CC_BKSP		equ 0x34	;BACKSPACE
                                           
                                           CC_ESC		equ 0x80	;ESCAPE
                                           CC_F1		equ 0x81
                                           CC_F2		equ 0x82
                                           CC_F3		equ 0x83
                                           CC_F4		equ 0x84
                                           CC_F5		equ 0x85
                                           CC_F6		equ 0x86
                                           CC_F7		equ 0x87
                                           CC_F8		equ 0x88
                                           CC_F9		equ 0x89
                                           CC_F10		equ 0x8A
                                           CC_F11		equ 0x8B
                                           CC_F12		equ 0x8C
                                           CC_PRINT	equ 0x8D
                                           CC_SCROLL	equ 0x8E
                                           CC_PAUSE	equ 0x8F
                                           CC_NUM		equ 0x90
                                           CC_CAPS		equ 0x91
                                           CC_LSHIFT       equ 0x92
                                           CC_RSHIFT       equ 0x93
                                           CC_CTRL		equ 0x94
                                           CC_CTRLR        equ 0x95
                                           CC_ALT		equ 0x96
                                           CC_ALTR         equ 0x97
                                           CC_GUIL		equ 0x98
                                           CC_GUIR		equ 0x99
                                           CC_APPS		equ 0x9A
                                           CC_INS          equ 0x9B
                                           CC_HOME         equ 0x9C
                                           CC_END          equ 0x9D
                                           CC_PGUP         equ 0x9E
                                           CC_PGDN         equ 0x9F
                                           CC_PSF          equ 0xA0
                                           CC_PSR          equ 0xA1
                                           ; A3 is Â£ symbol in character set, don't use it here
                                           CC_LEFT         equ 0xA4
                                           CC_RIGHT        equ 0xA5
                                           CC_UP           equ 0xA6
                                           CC_DOWN         equ 0xA7
                                           ; media keys
                                           CC_MNXT         equ 0xA7        ; media next
                                           CC_MPRV         equ 0xA8        ; media previous
                                           CC_MPP          equ 0xA9        ; media play/pause
                                           CC_MSTP         equ 0xAA        ; media stop
                                           CC_MMT          equ 0xAB        ; media mute
                                           CC_MVU          equ 0xAC        ; media volume up
                                           CC_MVD          equ 0xAD        ; media volume down
                                           CC_MSL          equ 0xAE        ; media select
                                           CC_MEM          equ 0xAF        ; media email
                                           ; B0 is the degrees symbol, mapped to a key
                                           CC_MCLC         equ 0xB1        ; media calculator
                                           CC_MCMP         equ 0xB2        ; media my computer
                                           CC_MSRCH        equ 0xB3        ; media web search
                                           CC_MHOME        equ 0xB4        ; media web home
                                           CC_MBCK         equ 0xB5        ; media web back
                                           CC_MFWD         equ 0xB6        ; media web forward
                                           CC_MWSP         equ 0xB7        ; media web stop
                                           CC_MRFSH        equ 0xB8        ; media web refresh
                                           CC_MFV          equ 0xB9        ; media web favourites
                                           ; acpi control codes
                                           CC_PWR          equ 0xBA        ; power
                                           CC_SLP          equ 0xBB        ; sleep
                                           CC_WK           equ 0xBC        ; wake
                                           
                                           CC_KP0		equ 0xC0
                                           CC_KP1		equ 0xC1
                                           CC_KP2		equ 0xC2
                                           CC_KP3		equ 0xC3
                                           CC_KP4		equ 0xC4
                                           CC_KP5		equ 0xC5
                                           CC_KP6		equ 0xC6
                                           CC_KP7		equ 0xC7
                                           CC_KP8		equ 0xC8
                                           CC_KP9		equ 0xC9
                                           CC_KPD		equ 0xCA	;.
                                           CC_KPS		equ 0xCB	;*
                                           CC_KPP		equ 0xCC	;+
                                           CC_KPM		equ 0xCD	;-
                                           CC_KPSL         equ 0xCE        ;/
                                           include portpins.inc
                                           ;== PORT Definitions ==========================================================
                                           
                                           ;-- PORT A --------------------------------------------------------------------
                                           
                                           P_READY         EQU     0
                                           P_FOUND         EQU     1
                                           P_INT           EQU     5
                                           
                                           PORTADEF        EQU     b'00100011'
                                           PORTADIR        EQU     b'11011100'
                                           
                                           ;-- PORT B --------------------------------------------------------------------
                                           
                                           PORTBDEF        EQU     b'00000000'
                                           PORTBDIR        EQU     b'01111111'
                                           
                                           ;-- PORT C --------------------------------------------------------------------
                                           
                                           P_TX            EQU     6
                                           P_RX            EQU     7
                                           
                                           PORTCDEF        EQU     b'00000000'
                                           PORTCDIR        EQU     b'11111111'
                                           
                                           ;-- PORT E --------------------------------------------------------------------
                                           
                                           P_RD            EQU     0
                                           P_WR            EQU     1
                                           P_CS            EQU     2
                                           
                                           PORTEDIR        EQU     b'00010111'
                                           PORTEDEF        EQU     b'00000000'
                                           
                                           ;-- ADC PINS -------------------------------------------------------------------
                                           
                                           ADCONDEF        EQU     b'00001111'
                                           
                                           ;== FLAG BIT DEFINITIONS =======================================================
                                           
                                           ; flags
                                           scroll_flag             equ     0
                                           num_flag                equ     1
                                           caps_flag               equ     2
                                           shift_flag              equ     3
                                           release_flag            equ     4
                                           talking_flag            equ     5
                                           send_failed_flag        equ     6
                                           special_flag            equ     7
                                           
                                           ; txflags
                                           ack_flag                equ     0
                                           resend_flag             equ     1
                                           pause_flag              equ     2
                                           send_release_flag       equ     3
                                           send_command_release_flag       equ     4
                                           
                                           ;-- Externals from ps2.asm -----------------------------------------------------
                                           
                                               EXTERN      flags
                                           
                                               CODE
                                           
                                           ;===============================================================================
                                           ; ascii_lookup - looksup the byte in WREG from an ndcode to an ascii code
                                           ;===============================================================================
                                           
                                           ;; This function works on printable ndcodes (less than 0x40) or numpad (0xC0 up)
                                           ;; The returned code is dependent on shift, caps and numlock where appropriate
                                           ;; if it's a numpad and numlock isn't asserted the return code may be a control
                                           ;; ndcode (0x40-0xBF).
                                           
                                           ascii_lookup
00006c   bee8     btfsc	0xe8, 0x7, 0         btfsc         WREG, 7
00006e   d032     bra	0xd4                   bra           ascii_lookup_numpad
                                             ; lookup a normal text key
000070   b78a     btfsc	0x8a, 0x3, 0x1       btfsc         flags, shift_flag
000072   d00d     bra	0x8e                   bra           ascii_lookup_shift
000074   b58a     btfsc	0x8a, 0x2, 0x1       btfsc         flags, caps_flag
000076   d018     bra	0xa8                   bra           ascii_lookup_caps
                                           ascii_lookup_nomod
000078   6af7     clrf	0xf7, 0               clrf          TBLPTRH
00007a   0f06     addlw	0x6                  addlw         low ND_CODES_ASCII_NOMOD
00007c   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS, C
00007e   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH, f
000080   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
000082   0e01     movlw	0x1                  movlw         high ND_CODES_ASCII_NOMOD
000084   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH, f
000086   6af8     clrf	0xf8, 0               clrf          TBLPTRU
000088   0008     tblrd	*                    tblrd*
00008a   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
00008c   0012     return	0                   return
                                           
                                           ascii_lookup_shift
                                             ; see if CAPS is set too
00008e   b58a     btfsc	0x8a, 0x2, 0x1       btfsc         flags, caps_flag
000090   d016     bra	0xbe                   bra           ascii_lookup_shiftcaps
000092   6af7     clrf	0xf7, 0               clrf          TBLPTRH
000094   0f3c     addlw	0x3c                 addlw         low ND_CODES_ASCII_SHIFT
000096   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS, C
000098   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH, f
00009a   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
00009c   0e01     movlw	0x1                  movlw         high ND_CODES_ASCII_SHIFT
00009e   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH, f
0000a0   6af8     clrf	0xf8, 0               clrf          TBLPTRU
0000a2   0008     tblrd	*                    tblrd*
0000a4   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
0000a6   0012     return	0                   return
                                           
                                           ascii_lookup_caps
0000a8   6af7     clrf	0xf7, 0               clrf          TBLPTRH
0000aa   0f72     addlw	0x72                 addlw         low ND_CODES_ASCII_CAPS
0000ac   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS, C
0000ae   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH, f
0000b0   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
0000b2   0e01     movlw	0x1                  movlw         high ND_CODES_ASCII_CAPS
0000b4   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH, f
0000b6   6af8     clrf	0xf8, 0               clrf          TBLPTRU
0000b8   0008     tblrd	*                    tblrd*
0000ba   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
0000bc   0012     return	0                   return
                                           
                                           ascii_lookup_shiftcaps
0000be   6af7     clrf	0xf7, 0               clrf          TBLPTRH
0000c0   0fa8     addlw	0xa8                 addlw         low ND_CODES_ASCII_SHIFTCAPS
0000c2   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS, C
0000c4   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH, f
0000c6   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
0000c8   0e01     movlw	0x1                  movlw         high ND_CODES_ASCII_SHIFTCAPS
0000ca   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH, f
0000cc   6af8     clrf	0xf8, 0               clrf          TBLPTRU
0000ce   0008     tblrd	*                    tblrd*
0000d0   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
0000d2   0012     return	0                   return
                                           
                                           ascii_lookup_numpad
                                             ; numpad codes need 0xC0 taken off for lookup
0000d4   0b3f     andlw	0x3f                 andlw         0x3F
0000d6   a38a     btfss	0x8a, 0x1, 0x1       btfss         flags, num_flag
0000d8   d00b     bra	0xf0                   bra           ascii_lookup_numctrl
                                           
                                           ascii_lookup_num
0000da   6af7     clrf	0xf7, 0               clrf          TBLPTRH
0000dc   0fde     addlw	0xde                 addlw         low ND_CODES_ASCII_NUM
0000de   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS, C
0000e0   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH, f
0000e2   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
0000e4   0e01     movlw	0x1                  movlw         high ND_CODES_ASCII_NUM
0000e6   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH, f
0000e8   6af8     clrf	0xf8, 0               clrf          TBLPTRU
0000ea   0008     tblrd	*                    tblrd*
0000ec   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
0000ee   0012     return	0                   return
                                           
                                           ascii_lookup_numctrl
0000f0   6af7     clrf	0xf7, 0               clrf          TBLPTRH
0000f2   0fee     addlw	0xee                 addlw         low ND_CODES_ASCII_NUMCTRL
0000f4   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS, C
0000f6   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH,f
0000f8   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
0000fa   0e01     movlw	0x1                  movlw         high ND_CODES_ASCII_NUMCTRL
0000fc   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH, f
0000fe   6af8     clrf	0xf8, 0               clrf          TBLPTRU
000100   0008     tblrd	*                    tblrd*
000102   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
000104   0012     return	0                   return
                                           
                                           include asciicodes.inc
                                           ;-------------------------------------------------------------------------------
                                           ;
                                           ; asciicodes.inc - lookup tables to give ASCII from ndcodes
                                           ; File Version 1.0 - 23 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;-------------------------------------------------------------------------------
                                           
                                           ND_CODES_ASCII_NOMOD
000106   3130     rrcf	0x30, 0, 0x1                db '0','1'
000108   3332     rrcf	0x32, 0x1, 0x1              db '2','3'
00010a   3534     rlcf	0x34, 0, 0x1                db '4','5'
00010c   3736     rlcf	0x36, 0x1, 0x1              db '6','7'
00010e   3938     swapf	0x38, 0, 0x1               db '8','9'
000110   6261     cpfseq	0x61, 0                   db 'a','b'
000112   6463     cpfsgt	0x63, 0                   db 'c','d'
000114   6665     tstfsz	0x65, 0                   db 'e','f'
000116   6867     setf	0x67, 0                     db 'g','h'
000118   6a69     clrf	0x69, 0                     db 'i','j'
00011a   6c6b     negf	0x6b, 0                     db 'k','l'
00011c   6e6d     movwf	0x6d, 0                    db 'm','n'
00011e   706f     btg	0x6f, 0, 0                   db 'o','p'
000120   7271     btg	0x71, 0x1, 0                 db 'q','r'
000122   7473     btg	0x73, 0x2, 0                 db 's','t'
000124   7675     btg	0x75, 0x3, 0                 db 'u','v'
000126   7877     btg	0x77, 0x4, 0                 db 'w','x'
000128   7a79     btg	0x79, 0x5, 0                 db 'y','z'
00012a   2d60     decfsz	0x60, 0, 0x1              db '`','-'
00012c   5b3d     subwfb	0x3d, 0x1, 0x1            db '=','['
00012e   275d     addwf	0x5d, 0x1, 0x1             db ']','\''
000130   2e2c     decfsz	0x2c, 0x1, 0              db ',','.'
000132   2f5c     decfsz	0x5c, 0x1, 0x1            db '\\','/'
000134   203b     addwfc	0x3b, 0, 0                db ';',' '
000136   0a09     xorlw	0x9                        db '\t','\n'
000138   7f0a     btg	0xa, 0x7, 0x1                db '\n',0x7F
00013a   0008     tblrd	*                          db 0x08,0x00
                                           
                                           ND_CODES_ASCII_SHIFT
00013c   2129     addwfc	0x29, 0, 0x1              db ')','!'
00013e   a322     btfss	0x22, 0x1, 0x1             db '\"',0xA3    ; Â£ symbol
000140   2524     addwf	0x24, 0, 0x1               db '$','%'
000142   265e     addwf	0x5e, 0x1, 0               db '^','&'
000144   282a     incf	0x2a, 0, 0                  db '*','('
000146   4241     rrncf	0x41, 0x1, 0               db 'A','B'
000148   4443     rlncf	0x43, 0, 0                 db 'C','D'
00014a   4645     rlncf	0x45, 0x1, 0               db 'E','F'
00014c   4847     infsnz	0x47, 0, 0                db 'G','H'
00014e   4a49     infsnz	0x49, 0x1, 0              db 'I','J'
000150   4c4b     dcfsnz	0x4b, 0, 0                db 'K','L'
000152   4e4d     dcfsnz	0x4d, 0x1, 0              db 'M','N'
000154   504f     movf	0x4f, 0, 0                  db 'O','P'
000156   5251     movf	0x51, 0x1, 0                db 'Q','R'
000158   5453     subfwb	0x53, 0, 0                db 'S','T'
00015a   5655     subfwb	0x55, 0x1, 0              db 'U','V'
00015c   5857     subwfb	0x57, 0, 0                db 'W','X'
00015e   5a59     subwfb	0x59, 0x1, 0              db 'Y','Z'
000160   5fb0     subwf	0xb0, 0x1, 0x1             db 0xB0,'_'     ;Â¬ character mapped to degree symbol
000162   7b2b     btg	0x2b, 0x5, 0x1               db '+','{'
000164   407d     rrncf	0x7d, 0, 0                 db '}','@'
000166   3e3c     incfsz	0x3c, 0x1, 0              db '<','>'
000168   3f7c     incfsz	0x7c, 0x1, 0x1            db '|','?'
00016a   203a     addwfc	0x3a, 0, 0                db ':',' '
00016c   0a09     xorlw	0x9                        db '\t','\n'
00016e   7f0a     btg	0xa, 0x7, 0x1                db '\n',0x7F
000170   0008     tblrd	*                          db 0x08,0x00
                                           
                                           ND_CODES_ASCII_CAPS
000172   3130     rrcf	0x30, 0, 0x1                db '0','1'
000174   3332     rrcf	0x32, 0x1, 0x1              db '2','3'
000176   3534     rlcf	0x34, 0, 0x1                db '4','5'
000178   3736     rlcf	0x36, 0x1, 0x1              db '6','7'
00017a   3938     swapf	0x38, 0, 0x1               db '8','9'
00017c   4241     rrncf	0x41, 0x1, 0               db 'A','B'
00017e   4443     rlncf	0x43, 0, 0                 db 'C','D'
000180   4645     rlncf	0x45, 0x1, 0               db 'E','F'
000182   4847     infsnz	0x47, 0, 0                db 'G','H'
000184   4a49     infsnz	0x49, 0x1, 0              db 'I','J'
000186   4c4b     dcfsnz	0x4b, 0, 0                db 'K','L'
000188   4e4d     dcfsnz	0x4d, 0x1, 0              db 'M','N'
00018a   504f     movf	0x4f, 0, 0                  db 'O','P'
00018c   5251     movf	0x51, 0x1, 0                db 'Q','R'
00018e   5453     subfwb	0x53, 0, 0                db 'S','T'
000190   5655     subfwb	0x55, 0x1, 0              db 'U','V'
000192   5857     subwfb	0x57, 0, 0                db 'W','X'
000194   5a59     subwfb	0x59, 0x1, 0              db 'Y','Z'
000196   2d60     decfsz	0x60, 0, 0x1              db '`','-'
000198   5b3d     subwfb	0x3d, 0x1, 0x1            db '=','['
00019a   275d     addwf	0x5d, 0x1, 0x1             db ']','\''
00019c   2e2c     decfsz	0x2c, 0x1, 0              db ',','.'
00019e   2f5c     decfsz	0x5c, 0x1, 0x1            db '\\','/'
0001a0   203b     addwfc	0x3b, 0, 0                db ';',' '
0001a2   0a09     xorlw	0x9                        db '\t','\n'
0001a4   7f0a     btg	0xa, 0x7, 0x1                db '\n',0x7F
0001a6   0008     tblrd	*                          db 0x08,0x00
                                           
                                           ND_CODES_ASCII_SHIFTCAPS ; shift and CAPS active, lower case and symbols
0001a8   2129     addwfc	0x29, 0, 0x1              db ')','!'
0001aa   a322     btfss	0x22, 0x1, 0x1             db '\"',0xA3    ; Â£ symbol
0001ac   2524     addwf	0x24, 0, 0x1               db '$','%'
0001ae   265e     addwf	0x5e, 0x1, 0               db '^','&'
0001b0   282a     incf	0x2a, 0, 0                  db '*','('
0001b2   6261     cpfseq	0x61, 0                   db 'a','b'
0001b4   6463     cpfsgt	0x63, 0                   db 'c','d'
0001b6   6665     tstfsz	0x65, 0                   db 'e','f'
0001b8   6867     setf	0x67, 0                     db 'g','h'
0001ba   6a69     clrf	0x69, 0                     db 'i','j'
0001bc   6c6b     negf	0x6b, 0                     db 'k','l'
0001be   6e6d     movwf	0x6d, 0                    db 'm','n'
0001c0   706f     btg	0x6f, 0, 0                   db 'o','p'
0001c2   7271     btg	0x71, 0x1, 0                 db 'q','r'
0001c4   7473     btg	0x73, 0x2, 0                 db 's','t'
0001c6   7675     btg	0x75, 0x3, 0                 db 'u','v'
0001c8   7877     btg	0x77, 0x4, 0                 db 'w','x'
0001ca   7a79     btg	0x79, 0x5, 0                 db 'y','z'
0001cc   5fb0     subwf	0xb0, 0x1, 0x1             db 0xB0,'_'     ;Â¬ character mapped to degree symbol
0001ce   7b2b     btg	0x2b, 0x5, 0x1               db '+','{'
0001d0   407d     rrncf	0x7d, 0, 0                 db '}','@'
0001d2   3e3c     incfsz	0x3c, 0x1, 0              db '<','>'
0001d4   3f7c     incfsz	0x7c, 0x1, 0x1            db '|','?'
0001d6   203a     addwfc	0x3a, 0, 0                db ':',' '
0001d8   0a09     xorlw	0x9                        db '\t','\n'
0001da   7f0a     btg	0xa, 0x7, 0x1                db '\n',0x7F
0001dc   0008     tblrd	*                          db 0x08,0x00
                                           
                                           ND_CODES_ASCII_NUM
0001de   3130     rrcf	0x30, 0, 0x1                db '0', '1'
0001e0   3332     rrcf	0x32, 0x1, 0x1              db '2', '3'
0001e2   3534     rlcf	0x34, 0, 0x1                db '4', '5'
0001e4   3736     rlcf	0x36, 0x1, 0x1              db '6', '7'
0001e6   3938     swapf	0x38, 0, 0x1               db '8', '9'
0001e8   2a2e     incf	0x2e, 0x1, 0                db '.', '*'
0001ea   2d2b     decfsz	0x2b, 0, 0x1              db '+', '-'
0001ec   002f     dw	0x2f  ;unknown opcode         db '/', 0x00
                                           
                                           ND_CODES_ASCII_NUMCTRL
0001ee   9d9b     bcf	0x9b, 0x6, 0x1               db CC_INS, CC_END
0001f0   9fa7     bcf	0xa7, 0x7, 0x1               db CC_DOWN, CC_PGDN
0001f2   00a4     dw	0xa4  ;unknown opcode         db CC_LEFT, 0x00
0001f4   9ca5     bcf	0xa5, 0x6, 0                 db CC_RIGHT, CC_HOME
0001f6   9ea6     bcf	0xa6, 0x7, 0                 db CC_UP, CC_PGUP
0001f8   2a7f     incf	0x7f, 0x1, 0                db 0x7F, '*'
0001fa   2d2b     decfsz	0x2b, 0, 0x1              db '+', '-'
0001fc   002f     dw	0x2f  ;unknown opcode         db '/', 0x00
                                           
                                           ;-- Export functions -----------------------------------------------------------
                                           
                                               GLOBAL      ascii_lookup
                                           
                                           end
                                           ;-------------------------------------------------------------------------------
                                           ;
                                           ; translation.asm - translate and handle raw set 2 scancodes
                                           ; File Version 1.0 - 23 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;-------------------------------------------------------------------------------
                                           
                                           list p=18f4520
                                           include <p18f4520.inc>
                                                   LIST
                                           
                                           ;==========================================================================
                                           ;  MPASM PIC18F4520 processor include
                                           ; 
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                                           ;==========================================================================
                                           
                                                   NOLIST
                                           include scancodes.inc
                                           CC_0		equ 0x00
                                           CC_1		equ 0x01
                                           CC_2		equ 0x02
                                           CC_3		equ 0x03
                                           CC_4		equ 0x04
                                           CC_5		equ 0x05
                                           CC_6		equ 0x06
                                           CC_7		equ 0x07
                                           CC_8		equ 0x08
                                           CC_9		equ 0x09
                                           CC_A		equ 0x0A
                                           CC_B		equ 0x0B
                                           CC_C		equ 0x0C
                                           CC_D		equ 0x0D
                                           CC_E		equ 0x0E
                                           CC_F		equ 0x0F
                                           CC_G		equ 0x10
                                           CC_H		equ 0x11
                                           CC_I		equ 0x12
                                           CC_J		equ 0x13
                                           CC_K		equ 0x14
                                           CC_L		equ 0x15
                                           CC_M		equ 0x16
                                           CC_N		equ 0x17
                                           CC_O		equ 0x18
                                           CC_P		equ 0x19
                                           CC_Q		equ 0x1A
                                           CC_R		equ 0x1B
                                           CC_S		equ 0x1C
                                           CC_T		equ 0x1D
                                           CC_U		equ 0x1E
                                           CC_V		equ 0x1F
                                           CC_W		equ 0x20
                                           CC_X		equ 0x21
                                           CC_Y		equ 0x22
                                           CC_Z		equ 0x23
                                           CC_LQ		equ 0x24	;`
                                           CC_DSH		equ 0x25        ;-
                                           CC_EQ		equ 0x26	;=
                                           CC_LSB		equ 0x27        ;[
                                           CC_RSB		equ 0x28        ;]
                                           CC_AP		equ 0x29	;'
                                           CC_CM		equ 0x2A	;,
                                           CC_FS		equ 0x2B	;.
                                           CC_WS		equ 0x2C	;\
                                           CC_US		equ 0x2D	;/
                                           CC_SC		equ 0x2E	;;
                                           CC_SP		equ 0x2F	;SPACE
                                           CC_TAB		equ 0x30	;TAB
                                           CC_ENTER	equ 0x31	;ENTER
                                           CC_KPE          equ 0x32        ;Key pad ENTER
                                           CC_DEL		equ 0x33	;DELETE
                                           CC_BKSP		equ 0x34	;BACKSPACE
                                           
                                           CC_ESC		equ 0x80	;ESCAPE
                                           CC_F1		equ 0x81
                                           CC_F2		equ 0x82
                                           CC_F3		equ 0x83
                                           CC_F4		equ 0x84
                                           CC_F5		equ 0x85
                                           CC_F6		equ 0x86
                                           CC_F7		equ 0x87
                                           CC_F8		equ 0x88
                                           CC_F9		equ 0x89
                                           CC_F10		equ 0x8A
                                           CC_F11		equ 0x8B
                                           CC_F12		equ 0x8C
                                           CC_PRINT	equ 0x8D
                                           CC_SCROLL	equ 0x8E
                                           CC_PAUSE	equ 0x8F
                                           CC_NUM		equ 0x90
                                           CC_CAPS		equ 0x91
                                           CC_LSHIFT       equ 0x92
                                           CC_RSHIFT       equ 0x93
                                           CC_CTRL		equ 0x94
                                           CC_CTRLR        equ 0x95
                                           CC_ALT		equ 0x96
                                           CC_ALTR         equ 0x97
                                           CC_GUIL		equ 0x98
                                           CC_GUIR		equ 0x99
                                           CC_APPS		equ 0x9A
                                           CC_INS          equ 0x9B
                                           CC_HOME         equ 0x9C
                                           CC_END          equ 0x9D
                                           CC_PGUP         equ 0x9E
                                           CC_PGDN         equ 0x9F
                                           CC_PSF          equ 0xA0
                                           CC_PSR          equ 0xA1
                                           ; A3 is Â£ symbol in character set, don't use it here
                                           CC_LEFT         equ 0xA4
                                           CC_RIGHT        equ 0xA5
                                           CC_UP           equ 0xA6
                                           CC_DOWN         equ 0xA7
                                           ; media keys
                                           CC_MNXT         equ 0xA7        ; media next
                                           CC_MPRV         equ 0xA8        ; media previous
                                           CC_MPP          equ 0xA9        ; media play/pause
                                           CC_MSTP         equ 0xAA        ; media stop
                                           CC_MMT          equ 0xAB        ; media mute
                                           CC_MVU          equ 0xAC        ; media volume up
                                           CC_MVD          equ 0xAD        ; media volume down
                                           CC_MSL          equ 0xAE        ; media select
                                           CC_MEM          equ 0xAF        ; media email
                                           ; B0 is the degrees symbol, mapped to a key
                                           CC_MCLC         equ 0xB1        ; media calculator
                                           CC_MCMP         equ 0xB2        ; media my computer
                                           CC_MSRCH        equ 0xB3        ; media web search
                                           CC_MHOME        equ 0xB4        ; media web home
                                           CC_MBCK         equ 0xB5        ; media web back
                                           CC_MFWD         equ 0xB6        ; media web forward
                                           CC_MWSP         equ 0xB7        ; media web stop
                                           CC_MRFSH        equ 0xB8        ; media web refresh
                                           CC_MFV          equ 0xB9        ; media web favourites
                                           ; acpi control codes
                                           CC_PWR          equ 0xBA        ; power
                                           CC_SLP          equ 0xBB        ; sleep
                                           CC_WK           equ 0xBC        ; wake
                                           
                                           CC_KP0		equ 0xC0
                                           CC_KP1		equ 0xC1
                                           CC_KP2		equ 0xC2
                                           CC_KP3		equ 0xC3
                                           CC_KP4		equ 0xC4
                                           CC_KP5		equ 0xC5
                                           CC_KP6		equ 0xC6
                                           CC_KP7		equ 0xC7
                                           CC_KP8		equ 0xC8
                                           CC_KP9		equ 0xC9
                                           CC_KPD		equ 0xCA	;.
                                           CC_KPS		equ 0xCB	;*
                                           CC_KPP		equ 0xCC	;+
                                           CC_KPM		equ 0xCD	;-
                                           CC_KPSL         equ 0xCE        ;/
                                           include portpins.inc
                                           ;== PORT Definitions ==========================================================
                                           
                                           ;-- PORT A --------------------------------------------------------------------
                                           
                                           P_READY         EQU     0
                                           P_FOUND         EQU     1
                                           P_INT           EQU     5
                                           
                                           PORTADEF        EQU     b'00100011'
                                           PORTADIR        EQU     b'11011100'
                                           
                                           ;-- PORT B --------------------------------------------------------------------
                                           
                                           PORTBDEF        EQU     b'00000000'
                                           PORTBDIR        EQU     b'01111111'
                                           
                                           ;-- PORT C --------------------------------------------------------------------
                                           
                                           P_TX            EQU     6
                                           P_RX            EQU     7
                                           
                                           PORTCDEF        EQU     b'00000000'
                                           PORTCDIR        EQU     b'11111111'
                                           
                                           ;-- PORT E --------------------------------------------------------------------
                                           
                                           P_RD            EQU     0
                                           P_WR            EQU     1
                                           P_CS            EQU     2
                                           
                                           PORTEDIR        EQU     b'00010111'
                                           PORTEDEF        EQU     b'00000000'
                                           
                                           ;-- ADC PINS -------------------------------------------------------------------
                                           
                                           ADCONDEF        EQU     b'00001111'
                                           
                                           ;== FLAG BIT DEFINITIONS =======================================================
                                           
                                           ; flags
                                           scroll_flag             equ     0
                                           num_flag                equ     1
                                           caps_flag               equ     2
                                           shift_flag              equ     3
                                           release_flag            equ     4
                                           talking_flag            equ     5
                                           send_failed_flag        equ     6
                                           special_flag            equ     7
                                           
                                           ; txflags
                                           ack_flag                equ     0
                                           resend_flag             equ     1
                                           pause_flag              equ     2
                                           send_release_flag       equ     3
                                           send_command_release_flag       equ     4
                                           
                                           ;-- Externals from hostbus.asm -------------------------------------------------
                                           
                                               EXTERN      hostbus_push
                                           
                                           ;-- Externals from ps2.asm -----------------------------------------------------
                                           
                                               EXTERN      ps2_queue_send
                                           
                                               EXTERN      flags
                                               EXTERN      txflags
                                           
                                           ;-- Externals from asciicodes.asm ----------------------------------------------
                                           
                                               EXTERN      ascii_lookup
                                           
                                           ;-- Externals from ndcodes.asm -------------------------------------------------
                                           
                                               EXTERN      ndcodes_lookup
                                           
                                               UDATA
                                           
                                           translation_buffer      res     1
                                           pause_count             res     1
                                           translation_mode        res     1
                                           
                                           TRANSLATE_ASCII         equ     1
                                           
                                           
                                               CODE
                                           
                                           ;===============================================================================
                                           ; translate_init - setup the translation system
                                           ;===============================================================================
                                           
                                           translate_init
0001fe   0e01     movlw	0x1                  movlw         TRANSLATE_ASCII
000200   6f82     movwf	0x82, 0x1            movwf         translation_mode
                                           
000202   978b     bcf	0x8b, 0x3, 0x1         bcf           txflags, send_release_flag
000204   898b     bsf	0x8b, 0x4, 0x1         bsf           txflags, send_command_release_flag
000206   958b     bcf	0x8b, 0x2, 0x1         bcf           txflags, pause_flag
                                           
000208   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; translate_key - handle a generic byte from a PS/2 keyboard
                                           ;===============================================================================
                                           
                                           ;; This takes any byte received via the PS/2 protocol module and translates it
                                           ;; to another code e.g. ASCII or NDCODE.  It also handles all flag setting (e.g.
                                           ;; ack flag when 0xFA is received, and shift, caps, num flag setting
                                           
                                           translate_key
00020a   6f80     movwf	0x80, 0x1            movwf         translation_buffer      ; store the code before it gets mangled
                                             ; if we're waiting for the Pause stream to finish, don't do anything
00020c   b58b     btfsc	0x8b, 0x2, 0x1       btfsc         txflags, pause_flag
00020e   d055     bra	0x2ba                  bra           translate_pause_count
                                           
                                             ; next handle F7
000210   0e83     movlw	0x83                 movlw         0x83
000212   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
000214   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
000216   ec36     call	0x26c, 0              call          translate_f7
000218   f001
                                           
                                             ; Now we can generalise
00021a   bf80     btfsc	0x80, 0x7, 0x1       btfsc         translation_buffer, 7
00021c   ef39     goto	0x272                 goto          translate_key_message   ; it's a special message not character
00021e   f001
                                           
                                             ; if not, then it's a scancode, turn it into something more useful
000220   0e01     movlw	0x1                  movlw         TRANSLATE_ASCII
000222   1982     xorwf	0x82, 0, 0x1         xorwf         translation_mode, w
000224   e04d     bz	0x2c0                   bz            translate_ascii
                                           
                                             ; default send the raw code and flags
                                             ; set the LEDS first though
000226   0e77     movlw	0x77                 movlw         0x77                            ; set2 - set numlock
000228   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
00022a   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
00022c   ecb6     call	0x36c, 0              call          translate_set_num
00022e   f001
                                           
000230   0e58     movlw	0x58                 movlw         0x58                            ; set2 - set capslock
000232   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
000234   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
000236   ecc1     call	0x382, 0              call          translate_set_caps
000238   f001
                                           
00023a   0e7e     movlw	0x7e                 movlw         0x7E                            ; set2 - set scrolllock
00023c   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
00023e   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
000240   eccc     call	0x398, 0              call          translate_set_scroll
000242   f001
                                           
000244   bf8a     btfsc	0x8a, 0x7, 0x1       btfsc         flags, special_flag
000246   ec2e     call	0x25c, 0              call          translate_send_special
000248   f001
                                           
00024a   b98a     btfsc	0x8a, 0x4, 0x1       btfsc         flags, release_flag
00024c   ec32     call	0x264, 0              call          translate_send_release
00024e   f001
                                           
000250   5180     movf	0x80, 0, 0x1          movf          translation_buffer, w
000252   ec58     call	0x6b0, 0              call          hostbus_push
000254   f003
                                           
000256   9f8a     bcf	0x8a, 0x7, 0x1         bcf           flags, special_flag
000258   998a     bcf	0x8a, 0x4, 0x1         bcf           flags, release_flag
                                           
00025a   0012     return	0                   return
                                           
                                           translate_send_special
00025c   0ee0     movlw	0xe0                 movlw         0xE0
00025e   ec58     call	0x6b0, 0              call          hostbus_push
000260   f003
000262   0012     return	0                   return
                                           
                                           translate_send_release
000264   0ef0     movlw	0xf0                 movlw         0xF0
000266   ec58     call	0x6b0, 0              call          hostbus_push
000268   f003
00026a   0012     return	0                   return
                                           
                                           translate_f7
00026c   0e7f     movlw	0x7f                 movlw         0x7F                    ; fake scancode for F7
00026e   6f80     movwf	0x80, 0x1            movwf         translation_buffer
000270   0012     return	0                   return
                                           
                                           translate_key_message
                                             ; need to set flags and stuff here
                                             ; release code
000272   0ef0     movlw	0xf0                 movlw         0xF0
000274   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
000276   e010     bz	0x298                   bz            translate_set_release
                                             ; special key code
000278   0ee0     movlw	0xe0                 movlw         0xE0
00027a   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
00027c   e00f     bz	0x29c                   bz            translate_set_special
                                             ; acknowledge code
00027e   0efa     movlw	0xfa                 movlw         0xFA
000280   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
000282   e00e     bz	0x2a0                   bz            translate_set_ack
                                             ; resend code
000284   0efe     movlw	0xfe                 movlw         0xFE
000286   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
000288   e00d     bz	0x2a4                   bz            translate_set_resend
                                             ; startup OK code
00028a   0eaa     movlw	0xaa                 movlw         0xAA
00028c   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
00028e   e00c     bz	0x2a8                   bz            translate_set_startup
                                             ; pause break start
000290   0ee1     movlw	0xe1                 movlw         0xE1
000292   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
000294   e00b     bz	0x2ac                   bz            translate_set_pause
                                             ; other codes shouldn't happen or we don't care about them
000296   0012     return	0                   return
                                           
                                           translate_set_release
000298   898a     bsf	0x8a, 0x4, 0x1         bsf           flags, release_flag
00029a   0012     return	0                   return
                                           
                                           translate_set_special
00029c   8f8a     bsf	0x8a, 0x7, 0x1         bsf           flags, special_flag
00029e   0012     return	0                   return
                                           
                                           translate_set_ack
0002a0   818b     bsf	0x8b, 0, 0x1           bsf           txflags, ack_flag
0002a2   0012     return	0                   return
                                           
                                           translate_set_resend
0002a4   838b     bsf	0x8b, 0x1, 0x1         bsf           txflags, resend_flag
0002a6   0012     return	0                   return
                                           
                                           translate_set_startup
0002a8   9289     bcf	0x89, 0x1, 0           bcf           LATA, P_FOUND
0002aa   0012     return	0                   return
                                           
                                           ; -- Pause/Break handling ------------------------------------------------------
                                           
                                           translate_set_pause
0002ac   858b     bsf	0x8b, 0x2, 0x1         bsf           txflags, pause_flag
0002ae   0e07     movlw	0x7                  movlw         0x7
0002b0   6f81     movwf	0x81, 0x1            movwf         pause_count
0002b2   0e8f     movlw	0x8f                 movlw         CC_PAUSE
0002b4   ec58     call	0x6b0, 0              call          hostbus_push
0002b6   f003
0002b8   0012     return	0                   return
                                           
                                           translate_pause_count
0002ba   4f81     dcfsnz	0x81, 0x1, 0x1      dcfsnz        pause_count, f
0002bc   958b     bcf	0x8b, 0x2, 0x1         bcf           txflags, pause_flag
0002be   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; translate_ascii - use ndcodes and ascii tables to send a useful code
                                           ;===============================================================================
                                           
                                           ;; This routine translates the ASCII compatible keys to single ASCII symbols.
                                           ;; Other keys (e.g. Cursor Keys, Control, Shift etc.) are sent in NDCODE along
                                           ;; with their release regardless of the "send_release" flag.
                                           
                                           translate_ascii
                                             ; to ndcode then it's just a bittest to see if it's printable or control
0002c0   5180     movf	0x80, 0, 0x1          movf          translation_buffer, w
0002c2   ecd7     call	0x3ae, 0              call          ndcodes_lookup
0002c4   f001
0002c6   aee8     btfss	0xe8, 0x7, 0         btfss         WREG, 7
0002c8   d02d     bra	0x324                  bra           translate_ascii_norm
                                             ; bit 7 set so it's keypad or control
0002ca   bce8     btfsc	0xe8, 0x6, 0         btfsc         WREG, 6
0002cc   d02b     bra	0x324                  bra           translate_ascii_norm
                                             ; bit 6 clear so it's not keypad
                                           
                                             ; trap the extra fluff the keyboard sends
0002ce   6f80     movwf	0x80, 0x1            movwf         translation_buffer
0002d0   0aa0     xorlw	0xa0                 xorlw         CC_PSF
0002d2   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
0002d4   d01b     bra	0x30c                  bra           translate_clearflags_leave      ; clear flags and return
                                           
                                             ; trap shift, caps, num and scroll
0002d6   5180     movf	0x80, 0, 0x1          movf          translation_buffer, w
0002d8   0bfe     andlw	0xfe                 andlw         0xFE
0002da   0a92     xorlw	0x92                 xorlw         CC_LSHIFT
0002dc   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
0002de   ecb2     call	0x364, 0              call          translate_set_shift
0002e0   f001
                                           
0002e2   0e90     movlw	0x90                 movlw         CC_NUM
0002e4   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
0002e6   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
0002e8   ecb6     call	0x36c, 0              call          translate_set_num
0002ea   f001
                                           
0002ec   0e91     movlw	0x91                 movlw         CC_CAPS
0002ee   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
0002f0   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
0002f2   ecc1     call	0x382, 0              call          translate_set_caps
0002f4   f001
                                           
0002f6   0e8e     movlw	0x8e                 movlw         CC_SCROLL
0002f8   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
0002fa   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
0002fc   eccc     call	0x398, 0              call          translate_set_scroll
0002fe   f001
                                           
                                           translate_ascii_control
000300   b98b     btfsc	0x8b, 0x4, 0x1       btfsc         txflags, send_command_release_flag
000302   d007     bra	0x312                  bra           translate_ascii_control_release
                                           
                                             ; send the nd control code
000304   5180     movf	0x80, 0, 0x1          movf          translation_buffer, w
000306   a98a     btfss	0x8a, 0x4, 0x1       btfss         flags, release_flag
000308   ec58     call	0x6b0, 0              call          hostbus_push
00030a   f003
                                           
                                             ; clear the flags and exit
                                           translate_clearflags_leave
00030c   998a     bcf	0x8a, 0x4, 0x1         bcf           flags, release_flag
00030e   9f8a     bcf	0x8a, 0x7, 0x1         bcf           flags, special_flag
000310   0012     return	0                   return
                                           
                                           translate_ascii_control_release
                                             ; see if this is a release and send if so
000312   b98a     btfsc	0x8a, 0x4, 0x1       btfsc         flags, release_flag
000314   ec32     call	0x264, 0              call          translate_send_release
000316   f001
                                           
                                             ; now  send the key
000318   5180     movf	0x80, 0, 0x1          movf          translation_buffer, w
00031a   ec58     call	0x6b0, 0              call          hostbus_push
00031c   f003
                                           
00031e   998a     bcf	0x8a, 0x4, 0x1         bcf           flags, release_flag
000320   9f8a     bcf	0x8a, 0x7, 0x1         bcf           flags, special_flag
                                           
000322   0012     return	0                   return
                                           
                                           translate_ascii_norm
                                             ; it's a character or keypad press, so translate to an ascii code if pos
000324   ec36     call	0x6c, 0               call          ascii_lookup
000326   f000
                                           
000328   6f80     movwf	0x80, 0x1            movwf         translation_buffer
                                             ; now see if it really is ascii
                                             ; two exceptions 1st is Â£ symbol, trap that
00032a   0ea3     movlw	0xa3                 movlw         0xA3
00032c   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
00032e   e008     bz	0x340                   bz            translate_ascii_not_control
                                             ; other is degree symbol, replaces mystery symbol Â¬
000330   0eb0     movlw	0xb0                 movlw         0xB0
000332   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
000334   e005     bz	0x340                   bz            translate_ascii_not_control
                                             ; othewise it it's above 0x7F it's a control key
000336   bf80     btfsc	0x80, 0x7, 0x1       btfsc         translation_buffer, 7
000338   d7e3     bra	0x300                  bra           translate_ascii_control ; probably numlock off then
                                           
                                             ; also interested in null bytes e.g. 5 when numlock is off, don't send these
00033a   0e00     movlw	0                    movlw         0x00
00033c   1980     xorwf	0x80, 0, 0x1         xorwf         translation_buffer, w
00033e   e006     bz	0x34c                   bz            translate_ascii_nosend  ; still clear the flags
                                           
                                           translate_ascii_not_control
                                             ; actual ascii, see if we should send a release
000340   b78b     btfsc	0x8b, 0x3, 0x1       btfsc         txflags, send_release_flag
000342   d007     bra	0x352                  bra           translate_ascii_norm_release
                                           
                                             ; send the code
000344   5180     movf	0x80, 0, 0x1          movf          translation_buffer, w
000346   a98a     btfss	0x8a, 0x4, 0x1       btfss         flags, release_flag
000348   ec58     call	0x6b0, 0              call          hostbus_push
00034a   f003
                                           
                                           translate_ascii_nosend
                                             ; clear the flags
00034c   998a     bcf	0x8a, 0x4, 0x1         bcf           flags, release_flag
00034e   9f8a     bcf	0x8a, 0x7, 0x1         bcf           flags, special_flag
000350   0012     return	0                   return
                                           
                                           translate_ascii_norm_release
000352   b98a     btfsc	0x8a, 0x4, 0x1       btfsc         flags,release_flag
000354   ec32     call	0x264, 0              call          translate_send_release
000356   f001
                                           
000358   5180     movf	0x80, 0, 0x1          movf          translation_buffer, w
00035a   ec58     call	0x6b0, 0              call          hostbus_push
00035c   f003
                                           
00035e   998a     bcf	0x8a, 0x4, 0x1         bcf           flags, release_flag
000360   9f8a     bcf	0x8a, 0x7, 0x1         bcf           flags, special_flag
000362   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; translate_set_shift - set or clear the shift flag
                                           ;===============================================================================
                                           
                                           translate_set_shift
000364   878a     bsf	0x8a, 0x3, 0x1         bsf           flags, shift_flag
000366   b98a     btfsc	0x8a, 0x4, 0x1       btfsc         flags, release_flag
000368   978a     bcf	0x8a, 0x3, 0x1         bcf           flags, shift_flag
00036a   0012     return	0                   return
                                           
                                           translate_set_num
00036c   b98a     btfsc	0x8a, 0x4, 0x1       btfsc         flags, release_flag
00036e   0012     return	0                   return                                        ; do nothing on key-release
000370   738a     btg	0x8a, 0x1, 0x1         btg           flags, num_flag
000372   0eed     movlw	0xed                 movlw         0xED
000374   ec0f     call	0x61e, 0              call          ps2_queue_send
000376   f003
000378   0e07     movlw	0x7                  movlw         0x07
00037a   158a     andwf	0x8a, 0, 0x1         andwf         flags, w
00037c   ec0f     call	0x61e, 0              call          ps2_queue_send
00037e   f003
000380   0012     return	0                   return
                                           
                                           translate_set_caps
000382   b98a     btfsc	0x8a, 0x4, 0x1       btfsc         flags, release_flag
000384   0012     return	0                   return                                        ; do nothing on key-release
000386   758a     btg	0x8a, 0x2, 0x1         btg           flags, caps_flag
000388   0eed     movlw	0xed                 movlw         0xED
00038a   ec0f     call	0x61e, 0              call          ps2_queue_send
00038c   f003
00038e   0e07     movlw	0x7                  movlw         0x07
000390   158a     andwf	0x8a, 0, 0x1         andwf         flags, w
000392   ec0f     call	0x61e, 0              call          ps2_queue_send
000394   f003
000396   0012     return	0                   return
                                           
                                           translate_set_scroll
000398   b98a     btfsc	0x8a, 0x4, 0x1       btfsc         flags, release_flag
00039a   0012     return	0                   return                                        ; do nothing on key-release
00039c   718a     btg	0x8a, 0, 0x1           btg           flags, scroll_flag
00039e   0eed     movlw	0xed                 movlw         0xED
0003a0   ec0f     call	0x61e, 0              call          ps2_queue_send
0003a2   f003
0003a4   0e07     movlw	0x7                  movlw         0x07
0003a6   158a     andwf	0x8a, 0, 0x1         andwf         flags, w
0003a8   ec0f     call	0x61e, 0              call          ps2_queue_send
0003aa   f003
0003ac   0012     return	0                   return
                                           
                                           ;-- Exported functions ---------------------------------------------------------
                                           
                                               GLOBAL      translate_key
                                               GLOBAL      translate_init
                                           
                                               GLOBAL      translation_mode        ; can be set by hostbus
                                           
                                           end
                                           ;-------------------------------------------------------------------------------
                                           ;
                                           ; ndcodes.asm - lookup table routines to give every key a unique single byte 
                                           ;               code from PS/2 set 2 scancodes, completely unique mapping
                                           ; File Version 1.0 - 23 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;-------------------------------------------------------------------------------
                                           
                                           list p=18f4520
                                           include <p18f4520.inc>
                                                   LIST
                                           
                                           ;==========================================================================
                                           ;  MPASM PIC18F4520 processor include
                                           ; 
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                                           ;==========================================================================
                                           
                                                   NOLIST
                                           include scancodes.inc
                                           CC_0		equ 0x00
                                           CC_1		equ 0x01
                                           CC_2		equ 0x02
                                           CC_3		equ 0x03
                                           CC_4		equ 0x04
                                           CC_5		equ 0x05
                                           CC_6		equ 0x06
                                           CC_7		equ 0x07
                                           CC_8		equ 0x08
                                           CC_9		equ 0x09
                                           CC_A		equ 0x0A
                                           CC_B		equ 0x0B
                                           CC_C		equ 0x0C
                                           CC_D		equ 0x0D
                                           CC_E		equ 0x0E
                                           CC_F		equ 0x0F
                                           CC_G		equ 0x10
                                           CC_H		equ 0x11
                                           CC_I		equ 0x12
                                           CC_J		equ 0x13
                                           CC_K		equ 0x14
                                           CC_L		equ 0x15
                                           CC_M		equ 0x16
                                           CC_N		equ 0x17
                                           CC_O		equ 0x18
                                           CC_P		equ 0x19
                                           CC_Q		equ 0x1A
                                           CC_R		equ 0x1B
                                           CC_S		equ 0x1C
                                           CC_T		equ 0x1D
                                           CC_U		equ 0x1E
                                           CC_V		equ 0x1F
                                           CC_W		equ 0x20
                                           CC_X		equ 0x21
                                           CC_Y		equ 0x22
                                           CC_Z		equ 0x23
                                           CC_LQ		equ 0x24	;`
                                           CC_DSH		equ 0x25        ;-
                                           CC_EQ		equ 0x26	;=
                                           CC_LSB		equ 0x27        ;[
                                           CC_RSB		equ 0x28        ;]
                                           CC_AP		equ 0x29	;'
                                           CC_CM		equ 0x2A	;,
                                           CC_FS		equ 0x2B	;.
                                           CC_WS		equ 0x2C	;\
                                           CC_US		equ 0x2D	;/
                                           CC_SC		equ 0x2E	;;
                                           CC_SP		equ 0x2F	;SPACE
                                           CC_TAB		equ 0x30	;TAB
                                           CC_ENTER	equ 0x31	;ENTER
                                           CC_KPE          equ 0x32        ;Key pad ENTER
                                           CC_DEL		equ 0x33	;DELETE
                                           CC_BKSP		equ 0x34	;BACKSPACE
                                           
                                           CC_ESC		equ 0x80	;ESCAPE
                                           CC_F1		equ 0x81
                                           CC_F2		equ 0x82
                                           CC_F3		equ 0x83
                                           CC_F4		equ 0x84
                                           CC_F5		equ 0x85
                                           CC_F6		equ 0x86
                                           CC_F7		equ 0x87
                                           CC_F8		equ 0x88
                                           CC_F9		equ 0x89
                                           CC_F10		equ 0x8A
                                           CC_F11		equ 0x8B
                                           CC_F12		equ 0x8C
                                           CC_PRINT	equ 0x8D
                                           CC_SCROLL	equ 0x8E
                                           CC_PAUSE	equ 0x8F
                                           CC_NUM		equ 0x90
                                           CC_CAPS		equ 0x91
                                           CC_LSHIFT       equ 0x92
                                           CC_RSHIFT       equ 0x93
                                           CC_CTRL		equ 0x94
                                           CC_CTRLR        equ 0x95
                                           CC_ALT		equ 0x96
                                           CC_ALTR         equ 0x97
                                           CC_GUIL		equ 0x98
                                           CC_GUIR		equ 0x99
                                           CC_APPS		equ 0x9A
                                           CC_INS          equ 0x9B
                                           CC_HOME         equ 0x9C
                                           CC_END          equ 0x9D
                                           CC_PGUP         equ 0x9E
                                           CC_PGDN         equ 0x9F
                                           CC_PSF          equ 0xA0
                                           CC_PSR          equ 0xA1
                                           ; A3 is Â£ symbol in character set, don't use it here
                                           CC_LEFT         equ 0xA4
                                           CC_RIGHT        equ 0xA5
                                           CC_UP           equ 0xA6
                                           CC_DOWN         equ 0xA7
                                           ; media keys
                                           CC_MNXT         equ 0xA7        ; media next
                                           CC_MPRV         equ 0xA8        ; media previous
                                           CC_MPP          equ 0xA9        ; media play/pause
                                           CC_MSTP         equ 0xAA        ; media stop
                                           CC_MMT          equ 0xAB        ; media mute
                                           CC_MVU          equ 0xAC        ; media volume up
                                           CC_MVD          equ 0xAD        ; media volume down
                                           CC_MSL          equ 0xAE        ; media select
                                           CC_MEM          equ 0xAF        ; media email
                                           ; B0 is the degrees symbol, mapped to a key
                                           CC_MCLC         equ 0xB1        ; media calculator
                                           CC_MCMP         equ 0xB2        ; media my computer
                                           CC_MSRCH        equ 0xB3        ; media web search
                                           CC_MHOME        equ 0xB4        ; media web home
                                           CC_MBCK         equ 0xB5        ; media web back
                                           CC_MFWD         equ 0xB6        ; media web forward
                                           CC_MWSP         equ 0xB7        ; media web stop
                                           CC_MRFSH        equ 0xB8        ; media web refresh
                                           CC_MFV          equ 0xB9        ; media web favourites
                                           ; acpi control codes
                                           CC_PWR          equ 0xBA        ; power
                                           CC_SLP          equ 0xBB        ; sleep
                                           CC_WK           equ 0xBC        ; wake
                                           
                                           CC_KP0		equ 0xC0
                                           CC_KP1		equ 0xC1
                                           CC_KP2		equ 0xC2
                                           CC_KP3		equ 0xC3
                                           CC_KP4		equ 0xC4
                                           CC_KP5		equ 0xC5
                                           CC_KP6		equ 0xC6
                                           CC_KP7		equ 0xC7
                                           CC_KP8		equ 0xC8
                                           CC_KP9		equ 0xC9
                                           CC_KPD		equ 0xCA	;.
                                           CC_KPS		equ 0xCB	;*
                                           CC_KPP		equ 0xCC	;+
                                           CC_KPM		equ 0xCD	;-
                                           CC_KPSL         equ 0xCE        ;/
                                           include portpins.inc
                                           ;== PORT Definitions ==========================================================
                                           
                                           ;-- PORT A --------------------------------------------------------------------
                                           
                                           P_READY         EQU     0
                                           P_FOUND         EQU     1
                                           P_INT           EQU     5
                                           
                                           PORTADEF        EQU     b'00100011'
                                           PORTADIR        EQU     b'11011100'
                                           
                                           ;-- PORT B --------------------------------------------------------------------
                                           
                                           PORTBDEF        EQU     b'00000000'
                                           PORTBDIR        EQU     b'01111111'
                                           
                                           ;-- PORT C --------------------------------------------------------------------
                                           
                                           P_TX            EQU     6
                                           P_RX            EQU     7
                                           
                                           PORTCDEF        EQU     b'00000000'
                                           PORTCDIR        EQU     b'11111111'
                                           
                                           ;-- PORT E --------------------------------------------------------------------
                                           
                                           P_RD            EQU     0
                                           P_WR            EQU     1
                                           P_CS            EQU     2
                                           
                                           PORTEDIR        EQU     b'00010111'
                                           PORTEDEF        EQU     b'00000000'
                                           
                                           ;-- ADC PINS -------------------------------------------------------------------
                                           
                                           ADCONDEF        EQU     b'00001111'
                                           
                                           ;== FLAG BIT DEFINITIONS =======================================================
                                           
                                           ; flags
                                           scroll_flag             equ     0
                                           num_flag                equ     1
                                           caps_flag               equ     2
                                           shift_flag              equ     3
                                           release_flag            equ     4
                                           talking_flag            equ     5
                                           send_failed_flag        equ     6
                                           special_flag            equ     7
                                           
                                           ; txflags
                                           ack_flag                equ     0
                                           resend_flag             equ     1
                                           pause_flag              equ     2
                                           send_release_flag       equ     3
                                           send_command_release_flag       equ     4
                                           
                                           ;-- Externals from ps2.asm -----------------------------------------------------
                                           
                                               EXTERN      flags
                                           
                                               CODE
                                           
                                           ;===============================================================================
                                           ; ndcodes_lookup
                                           ;===============================================================================
                                           
                                           ;; Lookup a set2 scancode and return a unique "ndcode" 8 bit value.  Checks the
                                           ;; special_flag to determine the proper key code
                                           
                                           ndcodes_lookup
0003ae   bf8a     btfsc	0x8a, 0x7, 0x1       btfsc         flags, special_flag
0003b0   efe5     goto	0x3ca                 goto          ndcodes_special
0003b2   f001
                                             ; normal key code
0003b4   6af7     clrf	0xf7, 0               clrf          TBLPTRH
0003b6   0fe0     addlw	0xe0                 addlw         low SCAN_CODES_ND
0003b8   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS,C
0003ba   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH, f
0003bc   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
0003be   0e03     movlw	0x3                  movlw         high SCAN_CODES_ND
0003c0   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH, f
0003c2   6af8     clrf	0xf8, 0               clrf          TBLPTRU
0003c4   0008     tblrd	*                    tblrd*
0003c6   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
0003c8   0012     return	0                   return
                                           
                                           ndcodes_special
0003ca   6af7     clrf	0xf7, 0               clrf          TBLPTRH
0003cc   0f60     addlw	0x60                 addlw         low SCAN_CODES_ND_E0
0003ce   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS,C
0003d0   2af7     incf	0xf7, 0x1, 0          incf          TBLPTRH,f
0003d2   6ef6     movwf	0xf6, 0              movwf         TBLPTRL
0003d4   0e04     movlw	0x4                  movlw         high SCAN_CODES_ND_E0
0003d6   26f7     addwf	0xf7, 0x1, 0         addwf         TBLPTRH,f
0003d8   6af8     clrf	0xf8, 0               clrf          TBLPTRU
0003da   0008     tblrd	*                    tblrd*
0003dc   50f5     movf	0xf5, 0, 0            movf          TABLAT,w
0003de   0012     return	0                   return
                                           
                                           include ndcodes.inc
                                           ;-------------------------------------------------------------------------------
                                           ;
                                           ; ndcodes.inc - lookup table to give every key a unique single byte code from
                                           ;               PS/2 set 2 scancodes, completely unique mapping
                                           ; File Version 1.0 - 23 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;-------------------------------------------------------------------------------
                                           
                                           ; actual codes are defined in scancodes.inc for ease of maintenance
                                           ; CC_PSF is a fake scancode intended to be stripped from the stream
                                           ; e.g. Print Screen sends 2 keys effectively, or when NUM lock is on a shift
                                           ; character is sent along with delete, end, pgup etc.
                                           ; Pause/Break is a long sequence starting with E1 and must be trapped separately
                                           ; F7 is moved from 0x83 to 0x7F (0x7F is otherwise unused) to keep the key
                                           ; codes all below 8 bits so the lookup tables are shorter.
                                           ; codes with bit 7 set are response or control codes (e.g. 0xAA = good self test
                                           ; 0xFA is acknowledge, 0xF0 is release) these should be trapped separately.
                                           
                                           SCAN_CODES_ND
0003e0   89ff     bsf	0xff, 0x4, 0x1               db 0xFF,        CC_F9           ;00,            01 - F9
0003e2   85ff     bsf	0xff, 0x2, 0x1               db 0xFF,        CC_F5           ;02,            03 - F5
0003e4   8183     bsf	0x83, 0, 0x1                 db CC_F3,       CC_F1           ;04 - F3,       05 - F1
0003e6   8c82     bsf	0x82, 0x6, 0                 db CC_F2,       CC_F12          ;06 - F2,       07 - F12
0003e8   8aff     bsf	0xff, 0x5, 0                 db 0xFF,        CC_F10          ;08,            09 - F10
0003ea   8688     bsf	0x88, 0x3, 0                 db CC_F8,       CC_F6           ;0A - F8,       0B - F6
0003ec   3084     rrcf	0x84, 0, 0                  db CC_F4,       CC_TAB          ;0C - F4,       0D - TAB
0003ee   ff24     dw	0xff24  ;unknown opcode         db CC_LQ,       0xFF            ;0E - `,        0F
0003f0   96ff     bcf	0xff, 0x3, 0                 db 0xFF,        CC_ALT          ;10,            11 - ALT
0003f2   ff92     dw	0xff92  ;unknown opcode         db CC_LSHIFT,   0xFF            ;12 - L SHIFT,  13
0003f4   1a94     xorwf	0x94, 0x1, 0               db CC_CTRL,     CC_Q            ;14 - CTRL,     15 - Q
0003f6   ff01     dw	0xff01  ;unknown opcode         db CC_1,        0xFF            ;16 - 1,        17
0003f8   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;18,            19
0003fa   1c23     comf	0x23, 0, 0                  db CC_Z,        CC_S            ;1A - Z,        1B - S
0003fc   200a     addwfc	0xa, 0, 0                 db CC_A,        CC_W            ;1C - A,        1D - W
0003fe   9802     bcf	0x2, 0x4, 0                  db CC_2,        CC_GUIL         ;1E - 2,        1F - L GUI
000400   0cff     retlw	0xff                       db 0xFF,        CC_C            ;20,            21 - C
000402   0d21     mullw	0x21                       db CC_X,        CC_D            ;22 - X,        23 - D
000404   040e     decf	0xe, 0, 0                   db CC_E,        CC_4            ;24 - E,        25 - 4
000406   9903     bcf	0x3, 0x4, 0x1                db CC_3,        CC_GUIR         ;26 - 3,        27 - R GUI
000408   2fff     decfsz	0xff, 0x1, 0x1            db 0xFF,        CC_SP           ;28,            29 - SPACE
00040a   0f1f     addlw	0x1f                       db CC_V,        CC_F            ;2A - V,        2B - F
00040c   1b1d     xorwf	0x1d, 0x1, 0x1             db CC_T,        CC_R            ;2C - T,        2D - R
00040e   9a05     bcf	0x5, 0x5, 0                  db CC_5,        CC_APPS         ;2E - 5,        2F - APPS
000410   17ff     andwf	0xff, 0x1, 0x1             db 0xFF,        CC_N            ;30,            31 - N
000412   110b     iorwf	0xb, 0, 0x1                db CC_B,        CC_H            ;32 - B,        33 - H
000414   2210     addwfc	0x10, 0x1, 0              db CC_G,        CC_Y            ;34 - G,        35 - Y
000416   ff06     dw	0xff06  ;unknown opcode         db CC_6,        0xFF            ;36 - 6,        37
000418   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;38,            39
00041a   1316     iorwf	0x16, 0x1, 0x1             db CC_M,        CC_J            ;3A - M,        3B - J
00041c   071e     decf	0x1e, 0x1, 0x1              db CC_U,        CC_7            ;3C - U,        3D - 7
00041e   ff08     dw	0xff08  ;unknown opcode         db CC_8,        0xFF            ;3E - 8,        3F
000420   2aff     incf	0xff, 0x1, 0                db 0xFF,        CC_CM           ;40,            41 - ,
000422   1214     iorwf	0x14, 0x1, 0               db CC_K,        CC_I            ;42 - K,        43 - I
000424   0018     dw	0x18  ;unknown opcode         db CC_O,        CC_0            ;44 - O,        45 - 0 (zero)
000426   ff09     dw	0xff09  ;unknown opcode         db CC_9,        0xFF            ;46 - 9,        47
000428   2bff     incf	0xff, 0x1, 0x1              db 0xFF,        CC_FS           ;48,            49 - .
00042a   152d     andwf	0x2d, 0, 0x1               db CC_US,       CC_L            ;4A - /,        4B - L
00042c   192e     xorwf	0x2e, 0, 0x1               db CC_SC,       CC_P            ;4C - ;,        4D - P
00042e   ff25     dw	0xff25  ;unknown opcode         db CC_DSH,      0xFF            ;4E - -,        4F
000430   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;50,            51
000432   ff29     dw	0xff29  ;unknown opcode         db CC_AP,       0xFF            ;52 - ',        53
000434   2627     addwf	0x27, 0x1, 0               db CC_LSB,      CC_EQ           ;54 - [,        55 - =
000436   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;56,            57
000438   9391     bcf	0x91, 0x1, 0x1               db CC_CAPS,     CC_RSHIFT       ;58 - CAPS,     59 - R SHIFT
00043a   2831     incf	0x31, 0, 0                  db CC_ENTER,    CC_RSB          ;5A - ENTER,    5B - ]
00043c   2cff     decfsz	0xff, 0, 0                db 0xFF,        CC_WS           ;5C,            5D - \
00043e   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;5E,            5F
000440   2cff     decfsz	0xff, 0, 0                db 0xFF,        CC_WS           ;60,            61 - \
000442   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;62,            63
000444   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;64,            65
000446   ff34     dw	0xff34  ;unknown opcode         db CC_BKSP,     0xFF            ;66 - BKSP,     67
000448   c1ff     movff	0x1ff, 0x4ff               db 0xFF,        CC_KP1          ;68,            69 - KP 1
00044a   c4ff
00044a   c4ff     movff	0x4ff, 0xfc7               db 0xFF,        CC_KP4          ;6A,            6B - KP 4
00044c   ffc7
00044c   ffc7     dw	0xffc7  ;unknown opcode         db CC_KP7,      0xFF            ;6C - KP 7,     6D
00044e   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;6E,            6F
000450   cac0     movff	0xac0, 0x5c2               db CC_KP0,      CC_KPD          ;70 - KP 0,     71 - KP .
000452   c5c2
000452   c5c2     movff	0x5c2, 0x8c6               db CC_KP2,      CC_KP5          ;72 - KP 2,     73 - KP 5
000454   c8c6
000454   c8c6     movff	0x8c6, 0x80                db CC_KP6,      CC_KP8          ;74 - KP 6,     75 - KP 8
000456   9080
000456   9080     bcf	0x80, 0, 0                   db CC_ESC,      CC_NUM          ;76 - ESC,      77 - NUM
000458   cc8b     movff	0xc8b, 0xdc3               db CC_F11,      CC_KPP          ;78 - F11,      79 - KP+
00045a   cdc3
00045a   cdc3     movff	0xdc3, 0x9cb               db CC_KP3,      CC_KPM          ;7A - KP 3,     7B - KP -
00045c   c9cb
00045c   c9cb     movff	0x9cb, 0x78e               db CC_KPS,      CC_KP9          ;7C - KP *,     7D - KP 9
00045e   878e
00045e   878e     bsf	0x8e, 0x3, 0x1               db CC_SCROLL,   CC_F7           ;7E - SCROLL,   7F - F7 (Not real scan 
                                                                                   ;   code, has to be moved here from 83)
                                           
                                           ; special keys preceded by E0
                                           SCAN_CODES_ND_E0
000460   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;00, 01
000462   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;02, 03
000464   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;04, 05
000466   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;06, 07
000468   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;08, 09
00046a   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;0A, 0B
00046c   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;0C, 0D
00046e   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;0E, 0F
000470   97b3     bcf	0xb3, 0x3, 0x1               db CC_MSRCH,    CC_ALTR         ;10, 11
000472   a0a0     btfss	0xa0, 0, 0                 db CC_PSF,      CC_PSF          ;12, 13     (both not wanted codes)
000474   a895     btfss	0x95, 0x4, 0               db CC_CTRLR,    CC_MPRV         ;14, 15
000476   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;16, 17
000478   ffb9     dw	0xffb9  ;unknown opcode         db CC_MFV,      0xFF            ;18, 19
00047a   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;1A, 1B
00047c   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;1C, 1D
00047e   98ff     bcf	0xff, 0x4, 0                 db 0xFF,        CC_GUIL         ;1E, 1F
000480   adb8     btfss	0xb8, 0x6, 0x1             db CC_MRFSH,    CC_MVD          ;20, 21
000482   abff     btfss	0xff, 0x5, 0x1             db 0xFF,        CC_MMT          ;22, 23
000484   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;24, 25
000486   99ff     bcf	0xff, 0x4, 0x1               db 0xFF,        CC_GUIR         ;26, 27
000488   ffb7     dw	0xffb7  ;unknown opcode         db CC_MWSP,     0xFF            ;28, 29
00048a   b1a0     btfsc	0xa0, 0, 0x1               db CC_PSF,      CC_MCLC         ;2A, 2B
00048c   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;2C, 2D
00048e   9aff     bcf	0xff, 0x5, 0                 db 0xFF,        CC_APPS         ;2E, 2F
000490   ffb6     dw	0xffb6  ;unknown opcode         db CC_MFWD,     0xFF            ;30, 31
000492   ffac     dw	0xffac  ;unknown opcode         db CC_MVU,      0xFF            ;32, 33
000494   ffa9     dw	0xffa9  ;unknown opcode         db CC_MPP,      0xFF            ;34, 35
000496   baa0     btfsc	0xa0, 0x5, 0               db CC_PSF,      CC_PWR          ;36, 37
000498   ffb5     dw	0xffb5  ;unknown opcode         db CC_MBCK,     0xFF            ;38, 39
00049a   aab4     btfss	0xb4, 0x5, 0               db CC_MHOME,    CC_MSTP         ;3A, 3B
00049c   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;3C, 3D
00049e   bbff     btfsc	0xff, 0x5, 0x1             db 0xFF,        CC_SLP          ;3E, 3F
0004a0   ffb2     dw	0xffb2  ;unknown opcode         db CC_MCMP,     0xFF            ;40, 41
0004a2   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;42, 43
0004a4   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;44, 45
0004a6   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;46, 47
0004a8   ffaf     dw	0xffaf  ;unknown opcode         db CC_MEM,      0xFF            ;48, 49
0004aa   ffce     dw	0xffce  ;unknown opcode         db CC_KPSL,     0xFF            ;4A, 4B
0004ac   a7ff     btfss	0xff, 0x3, 0x1             db 0xFF,        CC_MNXT         ;4C, 4D
0004ae   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;4E, 4F
0004b0   ffae     dw	0xffae  ;unknown opcode         db CC_MSL,      0xFF            ;50, 51
0004b2   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;52, 53
0004b4   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;54, 55
0004b6   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;56, 57
0004b8   a0ff     btfss	0xff, 0, 0                 db 0xFF,        CC_PSF          ;58, 59
0004ba   ff32     dw	0xff32  ;unknown opcode         db CC_KPE,      0xFF            ;5A, 5B
0004bc   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;5C, 5D
0004be   ffbc     dw	0xffbc  ;unknown opcode         db CC_WK,       0xFF            ;5E, 5F
0004c0   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;60, 61
0004c2   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;62, 63
0004c4   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;64, 65
0004c6   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;66, 67
0004c8   9dff     bcf	0xff, 0x6, 0x1               db 0xFF,        CC_END          ;68, 69
0004ca   a4ff     btfss	0xff, 0x2, 0               db 0xFF,        CC_LEFT         ;6A, 6B
0004cc   ff9c     dw	0xff9c  ;unknown opcode         db CC_HOME,     0xFF            ;6C, 6D
0004ce   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;6E, 6F
0004d0   339b     rrcf	0x9b, 0x1, 0x1              db CC_INS,      CC_DEL          ;70, 71
0004d2   ffa7     dw	0xffa7  ;unknown opcode         db CC_DOWN,     0xFF            ;72, 73
0004d4   a6a5     btfss	0xa5, 0x3, 0               db CC_RIGHT,    CC_UP           ;74, 75
0004d6   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;76, 77
0004d8   ffff     dw	0xffff  ;unknown opcode         db 0xFF,        0xFF            ;78, 79
0004da   ff9f     dw	0xff9f  ;unknown opcode         db CC_PGDN,     0xFF            ;7A, 7B
0004dc   9ea1     bcf	0xa1, 0x7, 0                 db CC_PSR,      CC_PGUP         ;7C, 7D
                                                   db 0xFF,        0xFF            ;7E, 7F
0004de   ffff     dw	0xffff  ;unknown opcode 
                                           ;-- Exported functions ---------------------------------------------------------
                                           
                                               GLOBAL      ndcodes_lookup
                                           
                                           end
                                           ;-------------------------------------------------------------------------------
                                           ;
                                           ; ps2.asm - PS/2 Keyboard driver and buffer firmware - PS/2 communication
                                           ;           routines for Z80 project Mark 2
                                           ; File Version 1.0 - 23 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;-------------------------------------------------------------------------------
                                           
                                           list p=18f4520
                                           include <p18f4520.inc>
                                                   LIST
                                           
                                           ;==========================================================================
                                           ;  MPASM PIC18F4520 processor include
                                           ; 
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                                           ;==========================================================================
                                           
                                                   NOLIST
                                           include <portpins.inc>
                                           ;== PORT Definitions ==========================================================
                                           
                                           ;-- PORT A --------------------------------------------------------------------
                                           
                                           P_READY         EQU     0
                                           P_FOUND         EQU     1
                                           P_INT           EQU     5
                                           
                                           PORTADEF        EQU     b'00100011'
                                           PORTADIR        EQU     b'11011100'
                                           
                                           ;-- PORT B --------------------------------------------------------------------
                                           
                                           PORTBDEF        EQU     b'00000000'
                                           PORTBDIR        EQU     b'01111111'
                                           
                                           ;-- PORT C --------------------------------------------------------------------
                                           
                                           P_TX            EQU     6
                                           P_RX            EQU     7
                                           
                                           PORTCDEF        EQU     b'00000000'
                                           PORTCDIR        EQU     b'11111111'
                                           
                                           ;-- PORT E --------------------------------------------------------------------
                                           
                                           P_RD            EQU     0
                                           P_WR            EQU     1
                                           P_CS            EQU     2
                                           
                                           PORTEDIR        EQU     b'00010111'
                                           PORTEDEF        EQU     b'00000000'
                                           
                                           ;-- ADC PINS -------------------------------------------------------------------
                                           
                                           ADCONDEF        EQU     b'00001111'
                                           
                                           ;== FLAG BIT DEFINITIONS =======================================================
                                           
                                           ; flags
                                           scroll_flag             equ     0
                                           num_flag                equ     1
                                           caps_flag               equ     2
                                           shift_flag              equ     3
                                           release_flag            equ     4
                                           talking_flag            equ     5
                                           send_failed_flag        equ     6
                                           special_flag            equ     7
                                           
                                           ; txflags
                                           ack_flag                equ     0
                                           resend_flag             equ     1
                                           pause_flag              equ     2
                                           send_release_flag       equ     3
                                           send_command_release_flag       equ     4
                                           
                                           ; -- Externals from hostbus.asm ------------------------------------------------
                                           
                                               EXTERN      hostbus_push
                                           
                                           ; -- Externals from translation.asm --------------------------------------------
                                           
                                               EXTERN      translate_key
                                           
                                               UDATA
                                           bit_count               res     1
                                           txreg                   res     1
                                           rxreg                   res     1
                                           ps2_send_val_temp       res     1
                                           ps2_send_ptr_temp       res     1
                                           ps2_timeout_reg         res     1
                                           ps2_send_count          res     1
                                           
                                           flags                   res     1
                                           txflags                 res     1
                                           
                                           count                   res     3
                                           
                                           parity                  res     1
                                           parity_flag             equ     0
                                           
                                               CODE
                                           
                                           ;===============================================================================
                                           ; ps2_init - setup interrupts and counter/timers
                                           ;===============================================================================
                                           
                                           ;; Called at boot to initialise all the flags registers, bit counters and 
                                           ;; interrupts used by the PS/2 communication routines
                                           
                                           ps2_init
0004e0   0e02     movlw	0x2                  movlw         0x02
0004e2   6eda     movwf	0xda, 0              movwf         FSR2H                   ; initialise send buffer pointer
0004e4   0e01     movlw	0x1                  movlw         0x01
0004e6   6ee2     movwf	0xe2, 0              movwf         FSR1H
0004e8   6eea     movwf	0xea, 0              movwf         FSR0H
                                           
0004ea   6ae9     clrf	0xe9, 0               clrf          FSR0L
0004ec   6ae1     clrf	0xe1, 0               clrf          FSR1L
0004ee   6ad9     clrf	0xd9, 0               clrf          FSR2L
                                           
0004f0   6b89     clrf	0x89, 0x1             clrf          ps2_send_count
                                           
0004f2   6b83     clrf	0x83, 0x1             clrf          bit_count
                                           
0004f4   0e42     movlw	0x42                 movlw         b'01000010'
0004f6   6ed5     movwf	0xd5, 0              movwf         T0CON                   ; setup for interrupt ~5kHz
0004f8   6ad6     clrf	0xd6, 0               clrf          TMR0L
                                           
                                             ; set the default flags
0004fa   0e02     movlw	0x2                  movlw         b'00000010'
0004fc   6f8a     movwf	0x8a, 0x1            movwf         flags
                                           
0004fe   9cf1     bcf	0xf1, 0x6, 0           bcf           INTCON2, INTEDG0        ; interrupt on falling edge on RB0
                                           
000500   88f2     bsf	0xf2, 0x4, 0           bsf           INTCON, INT0IE
000502   8af2     bsf	0xf2, 0x5, 0           bsf           INTCON, TMR0IE
000504   94f2     bcf	0xf2, 0x2, 0           bcf           INTCON, TMR0IF
000506   92f2     bcf	0xf2, 0x1, 0           bcf           INTCON, INT0IF
                                           
000508   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; ps2_keyboard_init - intialise the keyboard (reset and LEDs etc.)
                                           ;===============================================================================
                                           
                                           ;; This is a main loop function that waits for the keyboard to send a successful
                                           ;; startup message.  If it does not within ~1 second of entering the routine, a
                                           ;; reset message is sent to the keyboard and the timeout begins again.\\
                                           ;; Once the keyboard is started the LEDs are set to the default state.
                                           
                                           ps2_keyboard_init
                                             ; setup timer1 for 1 second overflow
00050a   0e31     movlw	0x31                 movlw         b'00110001'             ; enable TMR1 1:8 prescale
00050c   6ecd     movwf	0xcd, 0              movwf         T1CON
                                           
                                             ; means it will overflow 19.07 times in a second
00050e   0e20     movlw	0x20                 movlw         0x20
000510   6f88     movwf	0x88, 0x1            movwf         ps2_timeout_reg
                                           
                                           ps2_keyboard_wait
000512   a289     btfss	0x89, 0x1, 0         btfss         LATA, P_FOUND           ; see if the keyboard has been found
000514   d00d     bra	0x530                  bra           ps2_keyboard_init_done  ; disable timer and exit
                                           
                                             ; not found yet, wait for timeout
000516   b09e     btfsc	0x9e, 0, 0           btfsc         PIR1, TMR1IF
000518   d7fc     bra	0x512                  bra           ps2_keyboard_wait
                                             ; timer overflowed
00051a   909e     bcf	0x9e, 0, 0             bcf           PIR1, TMR1IF            ; clear flag
00051c   2f88     decfsz	0x88, 0x1, 0x1      decfsz        ps2_timeout_reg, f      ; keep count of how many times it has
00051e   d7f9     bra	0x512                  bra           ps2_keyboard_wait
                                           
000520   ec32     call	0x664, 0              call          ps2_wait_to_talk
000522   f003
000524   a289     btfss	0x89, 0x1, 0         btfss         LATA, P_FOUND
000526   d004     bra	0x530                  bra           ps2_keyboard_init_done  ; exit if it got through at the last min
000528   0eff     movlw	0xff                 movlw         0xFF
00052a   ec36     call	0x66c, 0              call          ps2_start_talking
00052c   f003
                                           
00052e   d7ed     bra	0x50a                  bra           ps2_keyboard_init       ; go back to waiting (reset to 1 sec
                                           
                                           ps2_keyboard_init_done
                                             ; clear any active_flags
000530   0e02     movlw	0x2                  movlw         b'00000010'
000532   6f8a     movwf	0x8a, 0x1            movwf         flags
                                           
000534   0e10     movlw	0x10                 movlw         b'00010000'
000536   6f8b     movwf	0x8b, 0x1            movwf         txflags
                                           
                                             ; send LEDs
000538   0eed     movlw	0xed                 movlw         0xED
00053a   ec0f     call	0x61e, 0              call          ps2_queue_send
00053c   f003
                                           
00053e   0e07     movlw	0x7                  movlw         0x07
000540   158a     andwf	0x8a, 0, 0x1         andwf         flags, w
000542   ec0f     call	0x61e, 0              call          ps2_queue_send
000544   f003
                                           
                                             ; all done go back to main
000546   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; ps2_timer_int - service a timer interrupt used in the PS/2 comms
                                           ;===============================================================================
                                           
                                           ;; The timer interrupt is used as a watchdog for serial comms, if a bit 
                                           ;; transition is expected but doesn't arrive after a certain time the receiver
                                           ;; is reset, this can cope with noise on the line such as connecting the
                                           ;; keyboard after boot.  The timer is also used in initialising host to device
                                           ;; communication which requires a timed initialisation phase.
                                           
                                           ps2_timer_int
                                             ; called if Timer0 overflows.  This means that there wasn't a bit edge in time
                                             ; alternatively that we've initiated host->device comms
000548   bb8a     btfsc	0x8a, 0x5, 0x1       btfsc         flags, talking_flag
00054a   efac     goto	0x558                 goto          timeout_talking
00054c   f002
                                             ; just a timeout.  Set all registers back to zero
00054e   6b83     clrf	0x83, 0x1             clrf          bit_count
000550   6b85     clrf	0x85, 0x1             clrf          rxreg
000552   9ed5     bcf	0xd5, 0x7, 0           bcf           T0CON, TMR0ON           ; disable the timeout until the next
                                                                                   ; start bit
000554   94f2     bcf	0xf2, 0x2, 0           bcf           INTCON, TMR0IF
000556   0012     return	0                   return
                                           
                                           timeout_talking
                                             ; Timer0 overflowed, but this is the start of the talking routine
000558   0e00     movlw	0                    movlw         0x00
00055a   1983     xorwf	0x83, 0, 0x1         xorwf         bit_count,w
00055c   e008     bz	0x56e                   bz            timeout_start_talking
                                             ; it's a timeout in some other part of the talk routine.  set send_failed_flag
                                             ; and clear up
00055e   8d8a     bsf	0x8a, 0x6, 0x1         bsf           flags, send_failed_flag
000560   9b8a     bcf	0x8a, 0x5, 0x1         bcf           flags, talking_flag
000562   9ed5     bcf	0xd5, 0x7, 0           bcf           T0CON, TMR0ON           ; disable the timer again
000564   8293     bsf	0x93, 0x1, 0           bsf           TRISB,1                 ; make sure the data pin is an input!
000566   6b83     clrf	0x83, 0x1             clrf          bit_count
000568   6b84     clrf	0x84, 0x1             clrf          txreg
00056a   94f2     bcf	0xf2, 0x2, 0           bcf           INTCON, TMR0IF          ; clear the interrupt flag
00056c   0012     return	0                   return
                                           
                                           timeout_start_talking
                                             ; just finished the "I want to talk signal"
                                             ; initialise the parity counter for odd parity
00056e   818f     bsf	0x8f, 0, 0x1           bsf           parity, parity_flag
                                             ; set data as output
000570   9293     bcf	0x93, 0x1, 0           bcf           TRISB, 1
000572   0e14     movlw	0x14                 movlw         d'20'
000574   6f8c     movwf	0x8c, 0x1            movwf         count
                                           timeout_wait_loop
000576   2f8c     decfsz	0x8c, 0x1, 0x1      decfsz        count,f
000578   d7fe     bra	0x576                  bra           timeout_wait_loop
                                             ; set clock as input
00057a   8093     bsf	0x93, 0, 0             bsf           TRISB, 0
                                             ; clear the edge interrupt flag
00057c   92f2     bcf	0xf2, 0x1, 0           bcf           INTCON, INT0IF
                                             ; enable the edge interrupt again
00057e   88f2     bsf	0xf2, 0x4, 0           bsf           INTCON, INT0IE
                                             ; increment the bit counter because that data bit is the start bit
000580   2b83     incf	0x83, 0x1, 0x1        incf          bit_count,f
                                             ; re-enable the timer overflow interrupt
000582   94f2     bcf	0xf2, 0x2, 0           bcf           INTCON, TMR0IF
000584   9ed5     bcf	0xd5, 0x7, 0           bcf           T0CON, TMR0ON
000586   6ad6     clrf	0xd6, 0               clrf          TMR0L
                                             ; leave the interrupt
000588   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; ps2_edge_int - an edge on the clock line caused interrupt
                                           ;===============================================================================
                                           
                                           ;; Triggered by a falling edge on the clock line, means we need to read or
                                           ;; write a bit from/to the keyboard.
                                           
                                           ps2_edge_int
                                             ; a falling edge on the keyboard clock save the bit
00058a   8ed5     bsf	0xd5, 0x7, 0           bsf           T0CON, TMR0ON           ; enable timeout counter
00058c   0e00     movlw	0                    movlw         d'0'                    ; startbit
00058e   1983     xorwf	0x83, 0, 0x1         xorwf         bit_count,w
000590   e026     bz	0x5de                   bz            edge_event_start
000592   0e09     movlw	0x9                  movlw         d'9'                    ; parity bit
000594   1983     xorwf	0x83, 0, 0x1         xorwf         bit_count,w
000596   e027     bz	0x5e6                   bz            edge_event_parity
000598   0e0a     movlw	0xa                  movlw         d'10'                   ; stop bit
00059a   1983     xorwf	0x83, 0, 0x1         xorwf         bit_count,w
00059c   e014     bz	0x5c6                   bz            edge_event_stop
00059e   0e0b     movlw	0xb                  movlw         d'11'                   ; ack bit in tx mode only
0005a0   1983     xorwf	0x83, 0, 0x1         xorwf         bit_count,w
0005a2   e02a     bz	0x5f8                   bz            edge_event_ack
                                           
                                             ; otherwise it's a data bit
                                             ; see if we're in talk or listen mode
0005a4   bb8a     btfsc	0x8a, 0x5, 0x1       btfsc         flags, talking_flag
0005a6   d006     bra	0x5b4                  bra           edge_event_send_bit
                                             ; listening so clock in a bit
0005a8   4385     rrncf	0x85, 0x1, 0x1       rrncf         rxreg,f
0005aa   9f85     bcf	0x85, 0x7, 0x1         bcf           rxreg,7
0005ac   b281     btfsc	0x81, 0x1, 0         btfsc         PORTB, 1
0005ae   8f85     bsf	0x85, 0x7, 0x1         bsf           rxreg,7
0005b0   ef0b     goto	0x616                 goto          edge_event_exit
0005b2   f003
                                           
                                           edge_event_send_bit
0005b4   b184     btfsc	0x84, 0, 0x1         btfsc         txreg,0
0005b6   8293     bsf	0x93, 0x1, 0           bsf           TRISB, 1        ; only one of these will run but it avoids
0005b8   a184     btfss	0x84, 0, 0x1         btfss         txreg,0         ; 'glitching' the hardware line with a clear-set
0005ba   9293     bcf	0x93, 0x1, 0           bcf           TRISB, 1
0005bc   b184     btfsc	0x84, 0, 0x1         btfsc         txreg,0
0005be   718f     btg	0x8f, 0, 0x1           btg           parity,parity_flag  ; don't forget the parity bit
0005c0   4384     rrncf	0x84, 0x1, 0x1       rrncf         txreg,f         ; rotate the register to put the next bit at 0
0005c2   ef0b     goto	0x616                 goto          edge_event_exit ; all done
0005c4   f003
                                           
                                           edge_event_stop
                                             ; if we got this far it's the stop bit
                                             ; see if we need to receive or send
0005c6   bb8a     btfsc	0x8a, 0x5, 0x1       btfsc         flags, talking_flag
0005c8   d007     bra	0x5d8                  bra           edge_event_send_stop
0005ca   9ed5     bcf	0xd5, 0x7, 0           bcf           T0CON, TMR0ON           ; turn off the timer
0005cc   6983     setf	0x83, 0x1             setf          bit_count               ; clear the bit count for the next one
0005ce   5185     movf	0x85, 0, 0x1          movf          rxreg, w
0005d0   ec05     call	0x20a, 0              call          translate_key
0005d2   f001
0005d4   ef0b     goto	0x616                 goto          edge_event_exit
0005d6   f003
                                             ; do some translation here
                                           
                                           edge_event_send_stop
                                             ; need to send the stop bit
0005d8   8293     bsf	0x93, 0x1, 0           bsf           TRISB, 1                ; set data as HIGH-Z
                                             ; not quite done, need to wait for an ack as well
0005da   ef0b     goto	0x616                 goto          edge_event_exit
0005dc   f003
                                           
                                           edge_event_start
                                             ; only do this on receive
0005de   6b85     clrf	0x85, 0x1             clrf          rxreg
0005e0   8ed5     bsf	0xd5, 0x7, 0           bsf           T0CON, TMR0ON           ; enable the timeout function
0005e2   ef0b     goto	0x616                 goto          edge_event_exit
0005e4   f003
                                           
                                           edge_event_parity
                                             ; only care when we're talking but need to check this
0005e6   ab8a     btfss	0x8a, 0x5, 0x1       btfss         flags, talking_flag
0005e8   ef0b     goto	0x616                 goto          edge_event_exit
0005ea   f003
                                             ; okay so we're talking, send the parity bit
0005ec   a18f     btfss	0x8f, 0, 0x1         btfss         parity, parity_flag
0005ee   9293     bcf	0x93, 0x1, 0           bcf           TRISB,1
0005f0   b18f     btfsc	0x8f, 0, 0x1         btfsc         parity, parity_flag
0005f2   8293     bsf	0x93, 0x1, 0           bsf           TRISB,1
                                             ; all done
0005f4   ef0b     goto	0x616                 goto          edge_event_exit
0005f6   f003
                                           
                                           edge_event_ack
                                             ; this is the acknowledge from the keyboard when we've just sent a byte
0005f8   b281     btfsc	0x81, 0x1, 0         btfsc         PORTB,1
0005fa   d006     bra	0x608                  bra           edge_event_ack_error    ; should have been low
                                             ; all done transmitting, clear the flags and tidy up
0005fc   9ed5     bcf	0xd5, 0x7, 0           bcf           T0CON, TMR0ON           ; stop the timer
0005fe   6983     setf	0x83, 0x1             setf          bit_count               ; reset the bit counter
000600   9b8a     bcf	0x8a, 0x5, 0x1         bcf           flags, talking_flag     ; exit talking mode
000602   6b84     clrf	0x84, 0x1             clrf          txreg
000604   ef0b     goto	0x616                 goto          edge_event_exit
000606   f003
                                           
                                           edge_event_ack_error
                                             ; all went wrong somewhere, set send_failed bit and clear the status
000608   8d8a     bsf	0x8a, 0x6, 0x1         bsf           flags, send_failed_flag
00060a   9b8a     bcf	0x8a, 0x5, 0x1         bcf           flags, talking_flag
00060c   6983     setf	0x83, 0x1             setf          bit_count
00060e   9ed5     bcf	0xd5, 0x7, 0           bcf           T0CON, TMR0ON
000610   6b84     clrf	0x84, 0x1             clrf          txreg
000612   ef0b     goto	0x616                 goto          edge_event_exit
000614   f003
                                           
                                           edge_event_exit
000616   2b83     incf	0x83, 0x1, 0x1        incf          bit_count,f
000618   6ad6     clrf	0xd6, 0               clrf          TMR0L                   ; clear the timeout counter
00061a   92f2     bcf	0xf2, 0x1, 0           bcf           INTCON, INT0IF
00061c   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; ps2_queue_send - queue a byte to be sent to the keyboard
                                           ;===============================================================================
                                           
                                           ;; This can be called with a byte in WREG to send to the keyboard (e.g. 0xED
                                           ;; then the LED setting to change LED state).  The byte is queued in an internal
                                           ;; buffer and sent once there are no ongoing transmissions.
                                           
                                           ps2_queue_send
                                             ; this can be called in interrupt so need to save the current pointer
00061e   6f86     movwf	0x86, 0x1            movwf         ps2_send_val_temp
000620   50d9     movf	0xd9, 0, 0            movf          FSR2L,w
000622   6f87     movwf	0x87, 0x1            movwf         ps2_send_ptr_temp
                                           
000624   0e00     movlw	0                    movlw         0x00
000626   1989     xorwf	0x89, 0, 0x1         xorwf         ps2_send_count, w        ; see if there are any bytes queued
000628   e003     bz	0x630                   bz            ps2_queue_send_save_here ; if not save straight away
                                           
                                             ; at least one byte queued, increment pointer until we're past the byte
                                           ps2_queue_send_loop
00062a   2ad9     incf	0xd9, 0x1, 0          incf          FSR2L, f
00062c   2ee8     decfsz	0xe8, 0x1, 0        decfsz        WREG, f
00062e   d7fd     bra	0x62a                  bra           ps2_queue_send_loop
                                           
                                           ps2_queue_send_save_here
000630   5186     movf	0x86, 0, 0x1          movf          ps2_send_val_temp, w
000632   6edf     movwf	0xdf, 0              movwf         INDF2
                                           
000634   2b89     incf	0x89, 0x1, 0x1        incf          ps2_send_count,f         ; increment bytes to send reference
                                           
                                             ; return the pointer to where it was
000636   5187     movf	0x87, 0, 0x1          movf          ps2_send_ptr_temp, w
000638   6ed9     movwf	0xd9, 0              movwf         FSR2L
00063a   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; ps2_send_bytes - send any queued bytes if the line is clear
                                           ;===============================================================================
                                           
                                           ;; If there are any bytes to send to the keyboard in the send buffer, send them
                                           ;; as soon as the line is clear.  Then wait for a response (ACK or RESEND) and
                                           ;; deal with it, if it's ACK, dump the sent byte and shift the buffer and return
                                           
                                           ps2_send_bytes
                                             ; keep looking for bytes to send, and then to see if it's safe to send them
00063c   0e00     movlw	0                    movlw         0x00
00063e   1989     xorwf	0x89, 0, 0x1         xorwf         ps2_send_count,w
000640   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z
000642   0012     return	0                   return                                ; no bytes to send
                                           
                                           ps2_send_bytes_resend
000644   938b     bcf	0x8b, 0x1, 0x1         bcf           txflags, resend_flag
000646   ec32     call	0x664, 0              call          ps2_wait_to_talk
000648   f003
                                             ; safe to send
00064a   50df     movf	0xdf, 0, 0            movf          INDF2, w
00064c   ec36     call	0x66c, 0              call          ps2_start_talking
00064e   f003
                                             ; now wait for an ack
                                           ps2_send_bytes_wait
000650   0e03     movlw	0x3                  movlw         0x03
000652   158b     andwf	0x8b, 0, 0x1         andwf         txflags, w
000654   e0fd     bz	0x650                   bz            ps2_send_bytes_wait
                                           
                                             ; got a response
000656   a18b     btfss	0x8b, 0, 0x1         btfss         txflags, ack_flag
                                             ; was a resend request
000658   d7f5     bra	0x644                  bra           ps2_send_bytes_resend
                                           
                                             ; dec the byte count and move the pointer on
                                           
00065a   2ad9     incf	0xd9, 0x1, 0          incf          FSR2L, f
00065c   0789     decf	0x89, 0x1, 0x1        decf          ps2_send_count, f
                                           
00065e   918b     bcf	0x8b, 0, 0x1           bcf           txflags, ack_flag
000660   938b     bcf	0x8b, 0x1, 0x1         bcf           txflags, resend_flag    ; make sure they're both clear
                                           
000662   0012     return	0                   return                                ; return to main
                                           
                                           ps2_wait_to_talk
000664   0e00     movlw	0                    movlw         0x00
000666   1983     xorwf	0x83, 0, 0x1         xorwf         bit_count,w             ; see if we're already receiving  
000668   e1fd     bnz	0x664                  bnz           ps2_wait_to_talk        ; wait for a gap
00066a   0012     return	0                   return
                                           
                                           ps2_start_talking
00066c   6f84     movwf	0x84, 0x1            movwf         txreg
                                             ; turn off the edge interrupt for a bit
00066e   98f2     bcf	0xf2, 0x4, 0           bcf           INTCON, INT0IE
                                             ; set the clock pin to output (drive the line low)
000670   9093     bcf	0x93, 0, 0             bcf           TRISB, 0
                                             ; clear timer 0 for a ~200uS delay, longer than the 100uS minimum
000672   6ad6     clrf	0xd6, 0               clrf          TMR0L
                                             ; start the timer to do the startup delay
000674   8ed5     bsf	0xd5, 0x7, 0           bsf           T0CON, TMR0ON
                                             ; set the flag to say we're in talk mode
000676   8b8a     bsf	0x8a, 0x5, 0x1         bsf           flags, talking_flag
000678   0012     return	0                   return
                                           
                                           ;-- Export the global functions and registers ----------------------------------
                                           
                                               GLOBAL      ps2_init
                                               GLOBAL      ps2_keyboard_init
                                               GLOBAL      ps2_timer_int
                                               GLOBAL      ps2_edge_int
                                               GLOBAL      ps2_queue_send
                                               GLOBAL      ps2_send_bytes
                                           
                                               GLOBAL      flags
                                               GLOBAL      txflags
                                           
                                           end
                                           ;------------------------------------------------------------------------------
                                           ;
                                           ; hostbus.asm - PS/2 Keyboard driver and buffer firmware - Z80 bus interfacing
                                           ;               routines for Z80 project Mark 2
                                           ; File Version 1.0 - 23 Feb 2010
                                           ; hairymnstr@gmail.com
                                           ;
                                           ; Copyright (C) 2010  Nathan Dumont
                                           ;
                                           ; This program is free software: you can redistribute it and/or modify
                                           ; it under the terms of the GNU General Public License as published by
                                           ; the Free Software Foundation, either version 3 of the License, or
                                           ; (at your option) any later version.
                                           ;
                                           ; This program is distributed in the hope that it will be useful,
                                           ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                           ; GNU General Public License for more details.
                                           ;
                                           ; You should have received a copy of the GNU General Public License
                                           ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                           ;
                                           ;------------------------------------------------------------------------------
                                           
                                           list p=18f4520
                                           include <p18f4520.inc>
                                                   LIST
                                           
                                           ;==========================================================================
                                           ;  MPASM PIC18F4520 processor include
                                           ; 
                                           ;  (c) Copyright 1999-2007 Microchip Technology, All rights reserved
                                           ;==========================================================================
                                           
                                                   NOLIST
                                           include <portpins.inc>
                                           ;== PORT Definitions ==========================================================
                                           
                                           ;-- PORT A --------------------------------------------------------------------
                                           
                                           P_READY         EQU     0
                                           P_FOUND         EQU     1
                                           P_INT           EQU     5
                                           
                                           PORTADEF        EQU     b'00100011'
                                           PORTADIR        EQU     b'11011100'
                                           
                                           ;-- PORT B --------------------------------------------------------------------
                                           
                                           PORTBDEF        EQU     b'00000000'
                                           PORTBDIR        EQU     b'01111111'
                                           
                                           ;-- PORT C --------------------------------------------------------------------
                                           
                                           P_TX            EQU     6
                                           P_RX            EQU     7
                                           
                                           PORTCDEF        EQU     b'00000000'
                                           PORTCDIR        EQU     b'11111111'
                                           
                                           ;-- PORT E --------------------------------------------------------------------
                                           
                                           P_RD            EQU     0
                                           P_WR            EQU     1
                                           P_CS            EQU     2
                                           
                                           PORTEDIR        EQU     b'00010111'
                                           PORTEDEF        EQU     b'00000000'
                                           
                                           ;-- ADC PINS -------------------------------------------------------------------
                                           
                                           ADCONDEF        EQU     b'00001111'
                                           
                                           ;== FLAG BIT DEFINITIONS =======================================================
                                           
                                           ; flags
                                           scroll_flag             equ     0
                                           num_flag                equ     1
                                           caps_flag               equ     2
                                           shift_flag              equ     3
                                           release_flag            equ     4
                                           talking_flag            equ     5
                                           send_failed_flag        equ     6
                                           special_flag            equ     7
                                           
                                           ; txflags
                                           ack_flag                equ     0
                                           resend_flag             equ     1
                                           pause_flag              equ     2
                                           send_release_flag       equ     3
                                           send_command_release_flag       equ     4
                                           
                                           ;-- Externals from ps2.asm -----------------------------------------------------
                                           
                                               EXTERN      ps2_queue_send
                                           
                                               EXTERN      flags
                                               EXTERN      txflags
                                           
                                           ;-- Externals from translation.asm ---------------------------------------------
                                           
                                               EXTERN      translation_mode
                                           
                                               UDATA
                                           
                                           hostbus_buffer          res     1    ; stores commands from Z80 while processing
                                           high_jump               res     1    ; high byte of jump address
                                           low_jump                res     1    ; low byte of jump address
                                           
                                               CODE
                                           
                                           ;===============================================================================
                                           ; hostbus_init - Setup the PSP and enable relevant interrupts
                                           ;===============================================================================
                                           
                                           ;; Called at boot time, sets the port directions and interrupts for running the
                                           ;; parallel slave port and interrupt outputs.
                                           
                                           hostbus_init
                                             ; setup the pointers, INDF0 is write pointer, INDF1 is read, make a looping
                                             ; 256 byte fifo
00067a   0e01     movlw	0x1                  movlw         0x01
00067c   6eea     movwf	0xea, 0              movwf         FSR0H
00067e   6ee2     movwf	0xe2, 0              movwf         FSR1H
000680   6ae9     clrf	0xe9, 0               clrf          FSR0L
000682   6ae1     clrf	0xe1, 0               clrf          FSR1L
                                           
                                             ; clear the PSPIF flag if it's set then enable the interrupt
000684   9e9e     bcf	0x9e, 0x7, 0           bcf           PIR1, PSPIF
000686   8e9d     bsf	0x9d, 0x7, 0           bsf           PIE1, PSPIE
000688   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; hostbus_int - Interrupt service routine for the PSP module
                                           ;===============================================================================
                                           
                                           ;; Called when PSPIF triggers an interrupt.  Deals with commands from the Z80
                                           ;; and keeping the output buffer loaded with the latest queued byte from the
                                           ;; FIFO.
                                           
                                           hostbus_int
                                             ; test to see if the Z80 read or wrote, if write IBF will be set (OBF might
                                             ; be low but could just mean we don't have anything to send)
00068a   be96     btfsc	0x96, 0x7, 0         btfsc         TRISE, IBF
00068c   d00c     bra	0x6a6                  bra           hostbus_int_write       ; IBF set, so Z80 wrote a byte
                                             ; otherwise Z80 read a byte
                                           hostbus_int_read
                                             ; a byte has been read by the Z80
                                             ; see if there is a new byte and load that into the buffer
                                             ; first clear the interrupt so that the Z80 doesn't come back immediately
00068e   8a89     bsf	0x89, 0x5, 0           bsf           LATA, P_INT
                                           
000690   9e9e     bcf	0x9e, 0x7, 0           bcf           PIR1, PSPIF             ; clear the internal interrupt flag
000692   50e9     movf	0xe9, 0, 0            movf          FSR0L,w
000694   18e1     xorwf	0xe1, 0, 0           xorwf         FSR1L,w
000696   b4d8     btfsc	0xd8, 0x2, 0         btfsc         STATUS, Z               ; if low bytes of fifo write and read
000698   0012     return	0                   return                                ; match, there's no new data
                                             ; if not then there's more data for the Z80
00069a   50e6     movf	0xe6, 0, 0            movf          POSTINC1,w              ; get the byte from the read pointer
00069c   6e83     movwf	0x83, 0              movwf         PORTD                   ; put it in the buffer for the next read
00069e   0e01     movlw	0x1                  movlw         0x01
0006a0   6ee2     movwf	0xe2, 0              movwf         FSR1H                   ; make sure we don't overflow the buffer
0006a2   9a89     bcf	0x89, 0x5, 0           bcf           LATA, P_INT             ; set the interrupt again
                                           
0006a4   0012     return	0                   return
                                           
                                           hostbus_int_write
0006a6   5083     movf	0x83, 0, 0            movf          PORTD, w
0006a8   ec61     call	0x6c2, 0              call          hostbus_command         ; interpret the command byte
0006aa   f003
0006ac   9e9e     bcf	0x9e, 0x7, 0           bcf           PIR1, PSPIF             ; clear the interrupt
                                           
0006ae   0012     return	0                   return
                                           
                                           ;===============================================================================
                                           ; hostbus_push - push a byte to the Z80, will queue in FIFO if bus is busy
                                           ;===============================================================================
                                           
                                           ;; The contents of WREG are sent to the Z80 at the next available time.  The
                                           ;; byte is put straight into the output if there are no queued bytes and an
                                           ;; interrupt is sent to the Z80 to request reading.  If the output is currently
                                           ;; full the byte is stored in the internal FIFO to await collection.
                                           
                                           hostbus_push
0006b0   bc96     btfsc	0x96, 0x6, 0         btfsc         TRISE,OBF
0006b2   d003     bra	0x6ba                  bra           hostbus_push_load_fifo
                                             ; the buffer is empty so load the byte directly to the Z80
0006b4   6e83     movwf	0x83, 0              movwf         PORTD
0006b6   9a89     bcf	0x89, 0x5, 0           bcf           LATA, P_INT             ; set an interrupt.
0006b8   0012     return	0                   return
                                           
                                           hostbus_push_load_fifo
0006ba   6eee     movwf	0xee, 0              movwf         POSTINC0                ; bung the byte in the fifo
0006bc   0e01     movlw	0x1                  movlw         0x01
0006be   6eea     movwf	0xea, 0              movwf         FSR0H                   ; make sure we wrap around 256 bytes
0006c0   0012     return	0                   return
                                           
                                           ;-- Private functions ----------------------------------------------------------
                                           
                                           hostbus_command
                                             ; interpret the byte in W as a command from the Z80
0006c2   6f90     movwf	0x90, 0x1            movwf         hostbus_buffer          ; save the byte before it gets mangled
0006c4   0e06     movlw	0x6                  movlw         high hostbus_command_table
0006c6   6f91     movwf	0x91, 0x1            movwf         high_jump               ; prepare to do a jump table lookup
                                           
0006c8   4190     rrncf	0x90, 0, 0x1         rrncf         hostbus_buffer, w       ; ends up with high nibble * 4 in WREG
0006ca   40e8     rrncf	0xe8, 0, 0           rrncf         WREG, w                 ; which is the jump index
0006cc   0b3c     andlw	0x3c                 andlw         0x3C                    ; mask the nibble
0006ce   0fde     addlw	0xde                 addlw         low hostbus_command_table
0006d0   b0d8     btfsc	0xd8, 0, 0           btfsc         STATUS, C
0006d2   2b91     incf	0x91, 0x1, 0x1        incf          high_jump, f            ; make sure the high jump is ready
                                           
0006d4   6f92     movwf	0x92, 0x1            movwf         low_jump
0006d6   5191     movf	0x91, 0, 0x1          movf          high_jump, w
0006d8   6efa     movwf	0xfa, 0              movwf         PCLATH                  ; set high byte for jump
0006da   5192     movf	0x92, 0, 0x1          movf          low_jump, w
0006dc   6ef9     movwf	0xf9, 0              movwf         PCL                     ; set the low byte for jump
                                           
                                           hostbus_command_table
                                             ; 16 commands
0006de   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 0
0006e0   f003
0006e2   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 1
0006e4   f003
0006e6   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 2
0006e8   f003
0006ea   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 3
0006ec   f003
0006ee   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 4
0006f0   f003
0006f2   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 5
0006f4   f003
0006f6   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 6
0006f8   f003
0006fa   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 7
0006fc   f003
0006fe   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 8
000700   f003
000702   ef8f     goto	0x71e                 goto          hostbus_null_command    ; 9
000704   f003
000706   ef8f     goto	0x71e                 goto          hostbus_null_command    ; A
000708   f003
00070a   ef8f     goto	0x71e                 goto          hostbus_null_command    ; B
00070c   f003
00070e   efa5     goto	0x74a                 goto          hostbus_set_translation_mode    ; C
000710   f003
000712   efa1     goto	0x742                 goto          hostbus_set_send_release    ; D
000714   f003
000716   ef9d     goto	0x73a                 goto          hostbus_set_send_command_release    ; E
000718   f003
00071a   ef90     goto	0x720                 goto          hostbus_set_flags    ; F
00071c   f003
                                           
                                           hostbus_null_command
                                             ; unused command code
00071e   0012     return	0                   return
                                           
                                           hostbus_set_flags
                                             ; command to set the caps/num/scroll flags
000720   0ef1     movlw	0xf1                 movlw         0xF1
000722   178a     andwf	0x8a, 0x1, 0x1       andwf         flags, f                ; set caps/shift/scroll off
                                           
000724   5190     movf	0x90, 0, 0x1          movf          hostbus_buffer, w
000726   0b07     andlw	0x7                  andlw         0x07
                                             
000728   138a     iorwf	0x8a, 0x1, 0x1       iorwf         flags, f                ; set them to the new value
                                           
00072a   0eed     movlw	0xed                 movlw         0xED
00072c   ec0f     call	0x61e, 0              call          ps2_queue_send          ; update keyboard LEDs
00072e   f003
000730   518a     movf	0x8a, 0, 0x1          movf          flags, w
000732   0b07     andlw	0x7                  andlw         0x07
000734   ec0f     call	0x61e, 0              call          ps2_queue_send
000736   f003
000738   0012     return	0                   return
                                           
                                           hostbus_set_send_command_release
                                             ; lsb contains new setting
00073a   998b     bcf	0x8b, 0x4, 0x1         bcf           txflags, send_command_release_flag
00073c   b190     btfsc	0x90, 0, 0x1         btfsc         hostbus_buffer, 0
00073e   898b     bsf	0x8b, 0x4, 0x1         bsf           txflags, send_command_release_flag
000740   0012     return	0                   return
                                           
                                           hostbus_set_send_release
                                             ; lsb contains new setting
000742   978b     bcf	0x8b, 0x3, 0x1         bcf           txflags, send_release_flag
000744   b190     btfsc	0x90, 0, 0x1         btfsc         hostbus_buffer, 0
000746   878b     bsf	0x8b, 0x3, 0x1         bsf           txflags, send_release_flag
000748   0012     return	0                   return
                                           
                                           hostbus_set_translation_mode
                                             ; lower nibble is new translation mode
00074a   0e0f     movlw	0xf                  movlw         0x0F
00074c   1590     andwf	0x90, 0, 0x1         andwf         hostbus_buffer, w
00074e   6f82     movwf	0x82, 0x1            movwf         translation_mode
000750   0012     return	0                   return
                                           
                                           ;== Export these functions =====================================================
                                           
                                               GLOBAL      hostbus_push
                                               GLOBAL      hostbus_int
                                               GLOBAL      hostbus_init
                                           
                                           end
