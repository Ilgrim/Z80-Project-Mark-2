fsync -v
\documentclass[a4paper,10pt]{book}

\usepackage{graphicx}
\usepackage[pdftex,bookmarks=true,breaklinks=true,colorlinks,linkcolor=black,filecolor=blue,urlcolor=blue,hypertexnames=false]{hyperref}

\hypersetup{
pdfauthor = {Nathan Dumont},
pdftitle = {Z80 Project Mark 2: Documentation},
pdfsubject = {System Manual}}

\usepackage{fancyhdr}
\pagestyle{fancy}
\renewcommand{\chaptermark}[1]{\markboth{#1}{}}
\fancyhead{}
\fancyhead[R]{\leftmark}
\fancyhead[L]{Z80 Project Documentation}
\fancyfoot{}
\fancyfoot[C]{\thepage}
\fancyfoot[R]{Nathan Dumont}
\renewcommand{\footrulewidth}{0.4pt}

\usepackage{tabularx}

% set up margins.  20mm Top Right and Bottom, 40mm Left for binding
\oddsidemargin 14.6mm   % 40mm - 1in
\evensidemargin 14.6mm
\topmargin -5.4mm
\textwidth 150mm        % 210mm - 20mm - 40mm
\headwidth 150mm
\headheight 12mm
\headsep 8mm
\textheight 217mm

%opening
\title{Z80 Project Mark 2: Documentation}
\author{Nathan Dumont}

\begin{document}

\maketitle

\tableofcontents

\newpage
\section{License}
Z80 Project Mark 2: Documentation\\
Copyright (C) 2009 Nathan Dumont
\\\\
This program is free software: you can redistribute it and/or 
modify it under the terms of the GNU General Public License as 
published by the Free Software Foundation, either version 3 of 
the License, or (at your option) any later version.
\\\\
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
\\\\
You should have received a copy of the GNU General Public License
along with this program.  
If not, see \href{http://www.gnu.org/licenses/}{http://www.gnu.org/licenses/}

\section{Revisions}
\begin{tabular}{lp{9cm}}
 13-Oct-2009&First creation of this manual.  Previous documentation on \href{http://www.nathandumont.com/node/215}{www.nathandumont.com}.\\
 17-Oct-2009&Documentation of external functions and variables added to the sections on main.asm, serial.asm and host\_bus.asm.\\ 
 11-Dec-2009&Updated the serial commands and source documentation, also added info on the python library.\\
 09-Jan-2010&Changed documentation to cover whole project.  Started adding port and pin details for the Z80 bus peripherals.\\
 05-Feb-2010&Started adding updates about the new hardware on the UI board.\\
\end{tabular}

\chapter{Z80 I/O Ports}
The Z80's IO bus is fully decoded so all 256 ports are potentially available for read and write.  Only a small number have been assigned in this version of the project however.  These are summarised in Table \ref{tab:ioports}.  All the port definitions, and bit names where applicable are to be found in the \texttt{statics.z8a} source file which specifies any constants used in the BIOS code.
\begin{table}[H]
 \begin{tabular}{lllp{4.5cm}}
  \textbf{Address}&\textbf{Access}&\textbf{Name}&\textbf{Description}\\
  0x00&r&RCREG&UART receive port.\\
  0x00&w&TXREG&UART transmit port.\\
  0x01&r&RCSTA&UART Status port.\\
  0x01&w&DEBUG&8 bit latch which drives LEDs for debug purposes.\\
  0x02&r/w&SD\_DATA&Access to the SD via the PIC while it is in slave mode.\\
  0x03&r/w&KEY\_DATA&Keyboard port, FIFO on read, accepts single commands on write.\\
  0x04&r/w&GPU\_COMMAND&Send commands to the GPU by writing if a response is available for that command read from this port.\\
  0x05&r/w&GPU\_DATA&Send characters to the screen, reads back character at cursor.\\
  0x06&r&PIF&Peripheral interrupt flags, read to find the source of an interrupt.\\
  0x06&w&PIE&Peripheral interrupt enable, used to mask some peripheral interrupt signals.\\
  0x07&r/w&USB&Access to the Vinculum USB host chip.\\
  0x08&r&STATUS&Access to various flags including USB FIFO status etc.\\
 \end{tabular}
 \caption{Z80 I/O port functions}
 \label{tab:ioports}
\end{table}


\section{RCSTA - 0x01R}
RCSTA is the UART status register.  The meaning of the bits is explained below, mainly it specifies the status of the receiver, but there are two flags to throttle loading of the UART so that new bytes are not loaded before the old ones have been sent.  For more details see the data sheet for a 6402 UART.
\vspace{12pt}

\noindent
\begin{tabularx}{\textwidth}{ | X | X | X | X | X | X | X | X | }
 \hline
 N/A&N/A&TRE&TBRE&PE&FE&OE&DR\\
 \hline
 7 msb&6&5&4&3&2&1&0 lsb\\
 \hline
\end{tabularx}
\vspace{12pt}

\noindent
\begin{tabular}{llp{7cm}}
 \textbf{Bits}&\textbf{Name}&\textbf{Description}\\
 7-6&N/A&Unused\\
 5&TRE&Set high once the whole character has been sent (including stop bits).\\
 4&TBRE&Transmit buffer register empty when set high.\\
 3&PE&A parity error occurred in the last reception when high.\\
 2&FE&A frame error occurred (stop bit missing) when high.\\
 1&OE&Over-run error, RCREG was not read before the new byte arrived when high.\\
 0&DR&There is new data ready to read when high.  This is used as an interrupt source for the Z80.\\
\end{tabular}


\section{PIF - 0x06R}
PIF contains a set of eight flag bits indicating the status of the eight configurable interrupt sources in the system.  If a line is low that means that device is currently requesting an interrupt service.  All eight bits of this port are combined with a bitwise and to produce the Z80's interrupt signal.  A bit may be low but not caused an interrupt if the interrupt enable flip-flop on the Z80 is not set.  More than one bit may be low at once, the priority is from bit 0 to bit 7 so if both interrupt 2 and 3 are active at the same time 2 should be serviced first.  Particular interrupts can be masked using the PIE register, if they are masked they will show as inactive in PIF, regardless of the state of the line coming from the device.
\vspace{12pt}

\noindent
\begin{tabularx}{\textwidth}{| X | X | X | X | X | X | X | X |}
 \hline
  IF7&IF6&IF5&IF4&GPUIF&UARTIF&KBIF&CKIF\\
 \hline
  7 msb&6&5&4&3&2&1&0 lsb\\
 \hline
\end{tabularx}
\vspace{12pt}

\noindent
\begin{tabular}{llp{7cm}}
 \textbf{Bits}&\textbf{Name}&\textbf{Description}\\
 7&IF7&Interrupt 7 (currently unassigned)\\
 6&IF6&Interrupt 6 (currently unassigned)\\
 5&IF5&Interrupt 5 (currently unassigned)\\
 4&IF4&Interrupt 4 (currently unassigned)\\
 3&GPUIF&GPU Interrupt, indicates when the GPU has booted\\
 2&UARTIF&UART Interrupt, triggered when the UART receives a byte.\\
 1&KBIF&Keyboard interrupt, a key press is ready or a connect event etc.\\
 0&CKIF&Clock interrupt, a timer based interrupt from the RTC has occured.\\
\end{tabular}

\section{PIE - 0x06W}
The PIE register is used to enable/disable specific device interrupts.  The bits
of the PIE register are bitwise ORed with the interrupt lines from their
respective devices.  This means that to enable an interrupt from a device (which
is active low) you need to set the coresponding bit low in the PIE register.
\vspace{12pt}

\noindent
\begin{tabularx}{\textwidth}{| X | X | X | X | X | X | X | X |}
 \hline
  IE7&IE6&IE5&IE4&GPUIE&UARTIE&KBIE&CKIE\\
 \hline
  7 msb&6&5&4&3&2&1&0 lsb\\
 \hline
\end{tabularx}

\vspace{12pt}

\noindent
\begin{tabular}{llp{9cm}}
 \textbf{Bits}&\textbf{Name}&\textbf{Description}\\
  7&IE7&0 = allow interrupt 7\newline 1 = disable interrupt 7\\
  6&IE6&0 = allow interrupt 6\newline 1 = disable interrupt 6\\
  5&IE5&0 = allow interrupt 5\newline 1 = disable interrupt 5\\
  4&IE4&0 = allow interrupt 4\newline 1 = disable interrupt 4\\
  3&GPUIE&0 = allow GPU interrupt\newline 1 = disable GPU interrupts\\
  2&UARTIE&0 = allow UART interrupts\newline 1 = disable UART interrupt\\
  1&KBIE&0 = allow keyboard interrupts\newline 1 = disable keyboard interrupt\\
  0&CKIE&0 = allow RTC interrupts\newline 1 = disable RTC interrupts\\
\end{tabular}
\vspace{12pt}

\noindent
\begin{tabular}{| l p{12cm} |}
 \hline
 \parbox[c]{2cm}{\includegraphics[width=2cm]{noteicon.pdf}}&
 \parbox{11.5cm}{\vspace{5pt}
  In the header file \texttt{statics.z8a} the IF bits are defined as the bit
  index e.g. CKIF is declared as 0 and GPUIF is declared as 3.  This is suitable
  for use with the Z80 \texttt{bit}, \texttt{set} and \texttt{res} commands.
  The IE bits are declared as 8 bit masks, e.g. CKIE is 0x01, GPUIE 0x04.  This
  makes them suitable for masks e.g. the start up value of the register can be
  done using the flags bitwise ORed by the compiler e.g. \texttt{UARTIE | KBIE}
  will mask off both the UART and Keyboard interrupts.\vspace{5pt}}\\
 \hline
\end{tabular}

\section{STATUS - 0x08R}
The status register is used to return single bit status information from a
number of the peripherals on the UI board.  The bits are read only and are
controlled by their related peripheral devices.
\vspace{12pt}

\noindent
\begin{tabularx}{\textwidth}{| X | X | X | X | X | X | X | X |}
 \hline
  USB\_RXF&USB\_TXE&GPU\_INT&KEY\_DETECT&KEY\_RDY&N/A&N/A&N/A\\
 \hline
  7 msb&6&5&4&3&2&1&0 lsb\\
 \hline
\end{tabularx}
\vspace{12pt}

\noindent
\begin{tabular}{llp{9cm}}
 \textbf{Bits}&\textbf{Name}&\textbf{Description}\\
 7&USB\_RXF&1 means there is data in the USB FIFO to read.\newline0 means there is no data, do not read from the USB FIFO.\\
 6&USB\_TXE&1 means it is safe to write to the USB FIFO.\newline0 means the write FIFO is full, don't write.\\
 5&GPU\_INT&This is an un-masked copy of the GPU interrupt line, so even if it is
 masked in the PIE register you can read the value here.\\
 4&KEY\_DETECT&This line is set (high, 1) if a keyboard is detected and provides
  a successful start up message (0xAA).\\
 3&KEY\_RDY&Indicates the state of the keyboard controller.  This is set
  (high, 1) once the keyboard controller is running and ready.\\
 2-0&N/A&Not used.\\
\end{tabular}



\chapter{Hardware Layout}
\section{UART}
\subsection{Jumpers}
\begin{figure}[h]
 \begin{center}
  \includegraphics[width=10cm]{uart_jumpers.pdf}
 \end{center}
 \caption{Jumper locations for UART settings}
 \label{fig:jumperlocations}
\end{figure}
There are two sets of jumper headers that affect the UART, these are JP\_BR and JP\_ST shown in Figure \ref{fig:jumperlocations}.  These headers are on the lower board near the serial port and the UART chip itself.  The settings are detailed below.
\subsubsection{JP\_BR: Baud Rate}
JP\_BR connects the clock source to the UART.  This allows the baud-rate of the communications to be selected from 4 possible speeds.  Table \ref{tab:jpbr} shows the possible speed settings.

\textbf{IMPORTANT NOTE:} It is essential to fit only one jumper in one of the four positions shown on JP\_BR, connecting more will short out the clock chip's outputs!

\begin{table}[h]
 \begin{tabular}{| l | l |}
  \hline
  \includegraphics[width=2cm]{jpbr1.pdf}&4800\\
  \hline
  \includegraphics[width=2cm]{jpbr2.pdf}&9600\\
  \hline
  \includegraphics[width=2cm]{jpbr3.pdf}&2400\\
  \hline
  \includegraphics[width=2cm]{jpbr4.pdf}&19200\\
  \hline
 \end{tabular}
 \caption{Baud rate jumper positions}
 \label{tab:jpbr}
\end{table}

\subsubsection{JP\_ST: UART settings}
The five jumpers on JP\_ST can be fitted in a variety of combinations to affect the character length, parity settings and stop bits.  Table \ref{tab:jpst} describes what the individual settings do.  Some of the jumpers work in combination.  In the table, positions which are shaded have no affect on the current setting, positions which are not shaded must be either fitted or not fitted as shown.

\begin{table}[h]
 \begin{tabular}{| l | p{8cm} |}
  \hline
  \includegraphics[height=2cm]{jpst_np.pdf}&No parity.\\
  \hline
  \includegraphics[height=2cm]{jpst_ep.pdf}&Even parity.\\
  \hline
  \includegraphics[height=2cm]{jpst_op.pdf}&Odd parity.\\
  \hline
  \hline
  \includegraphics[height=2cm]{jpst_1sb.pdf}&One stop bit.\\
  \hline
  \includegraphics[height=2cm]{jpst_2sb.pdf}&1.5 stop bits for character length of 5, 2 stop bits for all other lengths.\\
  \hline
  \hline
  \includegraphics[height=2cm]{jpst_5b.pdf}&5 bit character.\\
  \hline
  \includegraphics[height=2cm]{jpst_6b.pdf}&6 bit character.\\
  \hline
  \includegraphics[height=2cm]{jpst_7b.pdf}&7 bit character.\\
  \hline
  \includegraphics[height=2cm]{jpst_8b.pdf}&8 bit character.\\
  \hline
 \end{tabular}
 \caption{UART configuration jumpers.}
 \label{tab:jpst}
\end{table}

\chapter{GPU Commands}
\section{GPU Ports}
The GPU has two ports on the IO bus, both are read/writeable.  These are
referred to as GPU\_COMMAND (0x04) and GPU\_DATA (0x05).  The function of the
GPU\_DATA port has a constantly defined function, the command port accepts a set
of pre-defined commands which affect the way that the GPU functions.

\subsection{GPU\_DATA}
The GPU\_DATA port accepts data bytes and writes them to the active buffer.  By
default this is a display buffer so the bytes should be ASCII character codes 
corresponding to characters to be displayed on the screen.  Other data modes 
handle data in different ways, see the descriptions of these modes associated
with their commands.  By default all writes are done in ``overwrite'' mode, i.e.
whatever data is currently at the cursor is replaced with the byte written, it
is not shifted on, the cursor is automatically incremented.

Reading the data port will return a character from the cursor within the active
buffer.

\subsection{GPU\_COMMAND}
The GPU\_COMMAND port takes byte-wide commands which are used to set variables
within the GPU, and switch modes, e.g. select colour, row, or active screen.
GPU commands are basically 4 bit long in the upper nibble of the byte.  The
lower four bits are used to convey bits of data to the GPU or flags depending on
what the command is.  A summary of commands is in Table \ref{tab:gpucommands}
and details follow.

\begin{table}
 \begin{tabular}{llp{7cm}}
  \textbf{Bits}&\textbf{Name}&\textbf{Description}\\
  0000\_0000&GPU\_RESET&Issues a reset, clears all screens sets colour to 0 on all
  screens and sets both TV and VGA to virtaul screen 1.\\
  0001\_0000&GPU\_CLS&Clear screen, clears the current screen and sets cursor to
  (0,0).  The colour is not affected.\\
  0010\_bccc&GPU\_COLOUR&If b is set this sets the colour on the current screen
  to colour ccc (colours are 0-7).\\
  0011\_b000 n&GPU\_COLUMN&If b is set this sets the column on the current screen
  to the next byte sent to the command port (n).\\
  0100\_b000 n&GPU\_ROW&If b is set this sets the row on the current screen to the
  value of the next byte sent to the command port (n).\\
  0101\_0yyy&GPU\_SET\_VGA&Set the VGA to view virtual screen yyy.  (Only screens
  0 to 3 are implemented so far.)\\
  0101\_1yyy&GPU\_SET\_TV&Set the TV to view virtual screen yyy.  (Only screens 0
  to 3 are implented so far.)\\
  0110\_yyyy&GPU\_SELECT\_SCREEN&Set the active screen to virtual screen number
  yyyy.  (Currently only screens 0 to 3 are implemented, screens above 7 are
  intended to be non-display buffers)\\
  0111\_bmmm&GPU\_MODE&Set the GPU mode (VGA output only, see Section 
  \ref{sec:gpumodes} for details).  If b is set then the mode is set to mmm, if 
  b is 0 then the mode is available for read from the command port.\\
  1000\_0000&GPU\_AVAILABLE\_MODES&Get the highest mode currently detected to be
  supported by the attached screen.\\
 \end{tabular}
 \caption{GPU Command summary}
 \label{tab:gpucommands}
\end{table}

\section{GPU Modes}
\label{sec:gpumodes}
The GPU can display output in different resolutions depending on the hardware
attached.  These are called modes.  Two commands affect the mode setting and get
info about the current and available modes.  The GPU\_MODE command provides the
ability to set or get the current mode on the VGA output.  The
GPU\_AVAILABLE\_MODES command returns the highest mode that the current monitor
has been detected to support.  To allow for incorrect monitor detection, the GPU
does not prevent selection of a mode that has not been detected as supported, it
is advised that the software provides a prompt if deliberately exceeding the
recommended highest setting and reverts if no input was received in a time
period.

\vspace{12pt}
\noindent
\begin{tabular}{llp{7cm}}
 \textbf{Mode}&\textbf{Resolution (Chars)}&\textbf{Description}\\
 0&512x480 (32x15)&Low res-mode, matches TV output.  16x16 or 16x32 pixel tiles,
 4 colours per tile.  Suitable for tile based graphics or TV based text
 display.\\
 1&640x480 (80x40)&Text mode.  Supports two colours per character row, with
 8x12 characters.  Suitable for console displays etc.\\
 2&1024x768 (128x64)&Hi-res text mode.  Supports two colours per character row,
 with 8x12 pixel characters.  Suitable for console displays and text based GUIs
 on modern TFT displays of 15'' or bigger.\\
\end{tabular}

The GPU can detect a monitor attached to the VGA port that supports 640x480 or
1024x768.  If either of these modes is detected on startup the GPU selects the
640x480 text mode and puts the TV-output into sleep mode.  Querying the
supported modes will provide a value of 2 if a 1024x768 capable display has been
detected or a 1 if the display is capable of only 640x480.  If no display is
found on the VGA port at startup then this means either there is none or it does
not support plug-and-play detection.  In this case the GPU reverts to the
512x480 tile based mode, the TV display is then driven with the same output so
either display can be used as the primary output.

Once booted it is possible to switch to any other mode by sending a set mode
command.  This can be used for instance to switch to ``graphical mode'' where
the fast 16x16 tile mode can be used to generate low colour images.

When a mode switch command is issued the GPU\_READY bit in the status register is
set.  This bit is cleared again once the GPU has finished switching modes.
Commands and data sent in this time may not be handled correctly so it is
recommended not to send any.

\chapter{PIC Pin Allocations}
Figure \ref{fig:picpinout} shows the functions of all the pins on the PIC.  The crystal, power, programming and reset wiring have been left out for clarity.  The high address latch is fed from the low address bus, with a straight through mapping (i.e. A0 latches into A8, A2 latches into A9 ... A7 latches into A15).

\begin{figure}[h]
 \begin{center}
  \includegraphics[width=10cm]{pic_pinout.pdf}
 \end{center}
 \caption{Pin allocations on the PIC.}
 \label{fig:picpinout}
\end{figure}

\chapter{PIC Source Structure}
The source code for the CPU supervisor PIC is split into a number of files (as of 17 Oct 2009) to aid development by compartmentalising code to make it easier to find, and also to make it easier to write ``clean'' code with minimal cross-references between blocks of different functions.  The main source files are laid out below, as well as these assembly files there are 2 other files (as well as an include file and linker script from GPUtils); the Makefile which automates building and programming the PIC and the portpins.inc file which declares the pinout of the PIC in handy names for bit-set/bit-test type operations.

\section{Files}
\subsection{Main (main.asm)}
The Main assembler file contains the glue functions that sticks all the other source files together.  This sets up the interrupt address dispatching, the initialising code and the main loop.

\subsubsection{External Functions}
There are no externally callable functions in Main.

\subsubsection{Internal Functions}

\subsubsection{Global Variables}
\begin{tabular}{lp{8cm}}
 \textbf{Name}&\textbf{Description}\\
 \texttt{MAIN\_TEMP}&A general purpose temporary register for use in the main thread (not interrupts).  Use this only for short term storage where the value will be immediately consumed by a called function or it might be overwritten.\\
\end{tabular}


\subsection{Serial (serial.asm)}
The serial assembler file contains all the code relating to the RS232 debug port on the PIC.  This code is used to allow a PC to control the Z80 CPU by giving access to DMA, with IO and Memory read and write commands.  This source file contains all the functions from the basic send and receive up to the specific command handler functions.  For details of the communications protocol and command codes see Chapter \ref{chap:comms}.

\subsubsection{External Functions}
\begin{tabular}{lp{8cm}}
 \textbf{Name}&\textbf{Description}\\
 \texttt{serial\_init}&Initialisation routine for all hardware and software set up for the serial comms routines.  Called by \texttt{init} in the main file when the PIC is started up.\\
 \texttt{serial\_rx\_int}&The interrupt handling routine.  Called from the main interrupt service in main.asm when a serial receive interrupt event occurs.\\
 \texttt{serial\_command\_dispatch}&Command dispatcher, called from the main loop.  This checks to see if there are any commands waiting to be run and directs execution accordingly.\\
\end{tabular}


\subsubsection{Internal Functions}

\subsubsection{Global Variables}

\subsection{Z80 Bus (host\_bus.asm)}
The Z80 Bus assembler file contains all the functions for accessing the host CPU bus, e.g. writing to an IO port, or putting the Z80 into DMA slave mode.  See the sd\_card.asm section for the Slave device functions.

\subsubsection{External Functions}
\begin{tabular}{lp{8cm}}
 \textbf{Name}&\textbf{Description}\\
 \texttt{get\_reset}&Call this function to put the Z80 into reset and set the PIC as the bus master.\\
 \texttt{get\_dma}&Call this function to put the Z80 into DMA mode and set the PIC as the bus master.\\
 \texttt{get\_slave}&Set the PIC to be a normal IO device on the bus.  This releases control of the bus and releases the RESET and BUSRQ lines, it also enables interrupts on the PSP so that read/write from the PIC is handled by interrupt.\\
 \texttt{ensure\_master}&Call this to make sure that the Z80 is master, if it is this returns immediately, if not it puts the Z80 into DMA slave mode.  This is designed to allow random access to peek at memory or peripherals without setting up a master session manually each time, but allows for a master session to be set up by first calling \texttt{get\_reset} or \texttt{get\_dma}.\\
 \texttt{revert\_master}&Call this after a call to \texttt{ensure\_master} to return the bus to the previous state (e.g. PIC as slave etc.)\\
 \texttt{io\_read}&Read a single IO address, the address is taken from \texttt{HI\_ADDR} and \texttt{LO\_ADDR}, data is returned in \texttt{DREG}.  No mode checking is performed when this is called so it is the calling routine's responsibility to check that the PIC is allowed to drive the bus.\\
 \texttt{io\_write}&As with \texttt{io\_read} except that the content of \texttt{DREG} are written to the address provided.\\
 \texttt{mem\_read}&Identical to \texttt{io\_read} except that it drives the memory bus instead.\\
 \texttt{mem\_write}&Identical to \texttt{io\_write} except that it drives the memory bus instead.\\
\end{tabular}

\subsubsection{Internal Functions}

\subsubsection{Global Variables}
\begin{tabular}{lp{8cm}}
 \textbf{Name}&\textbf{Description}\\
 \texttt{HI\_ADDR}&High byte of address for bus operations.\\
 \texttt{LO\_ADDR}&Low byte of address for bus operations.\\
 \texttt{DREG}&Data buffer for bus operations.\\
\end{tabular}


\subsection{SD Card Functions (sd\_card.asm)}
When the PIC is in peripheral mode it sits on the bus acting as a pass-through device for accessing an SD card in MMC (SPI) mode.  This allows the Z80 to do simple byte operations to it even though the SD card interface is serial.  The PIC does not do any of the file system handling or higher functions though.  The main interface to this code is interrupt driven from the PSP peripheral on the PIC.

\subsubsection{External Functions}

\subsubsection{Internal Functions}

\subsubsection{Global Variables}

\subsection{Z80 Boot (boot.asm)}
The Z80 boot file contains a few high level functions that are used to allow the system's boot ROM to be stored in the PIC's flash memory.  This code is called at start-up to copy the boot ROM into system RAM.  There is also support for sending the boot code to the host PC and for downloading a new boot code from the host PC within this source file.

\subsubsection{External Functions}
\begin{tabular}{lp{8cm}}
 \textbf{Name}&\texttt{Description}\\
 \texttt{boot\_init}&Setup all the external functions for driving the Z80.  This is mainly to do with the software-generated clock signal that is made by one of the PIC's PWM peripherals.\\
 \texttt{boot\_load}&Copies the ROM image from the top 8K of the PIC's Flash into the bottom 8K of the system memory map.\\
 \texttt{boot\_update}&Copies a 128 byte block from the RX buffer to the internal Flash.\\
\end{tabular}


\subsubsection{Internal Functions}

\subsubsection{Global Variables}

\subsection{Boot ROM (rom.asm)}
This file has no functions, it contains a chunk of Z80 machine code that is used to boot the main CPU after it is copied to system RAM on boot.  This file provides a convenient way to include the code in to the final hex file for the PIC.

\subsubsection{External Functions}
There are no external functions in this file.

\subsubsection{Internal Functions}
There are no internal functions in this file.

\subsubsection{Global Variables}

\chapter{Variables and Constants}


\chapter{Debug Comms Protocol}
\label{chap:comms}
\section{Buffer Locations}
RX Buffer: 0x0100-0x01FF, Used through INDF0\\
TX Buffer: 0x0200-0x02FF, Used through INDF1

\section{Packet Specifications}
\subsection{Host to Device Packet Definition}
\begin{tabular}{l|c|p{6cm}}
 \textbf{Name}&\textbf{Length (Bytes)}&\textbf{Description}\\
\hline
 Command&1&A byte in the range 0x00-0x1F (0-31) See the instruction table below for details.\\
\hline
 Data Length&1&Length (in bytes) of the data payload of the packet.  Maximum value is 253 so that the whole packet fits into the buffer.\\
\hline
 Data&\textit{data length}&Any byte string specified by the length.  Can be zero length.\\
\hline
 Checksum&1&An XOR checksum of all the bytes in the packet from the Command to the last byte of the data.\\
\end{tabular}

\subsection{Device to Host Packet Definition}
\begin{tabular}{l|c|p{6cm}}
 \textbf{Name}&\textbf{Length (Bytes)}&\textbf{Description}\\
\hline
 Response&1&A Response code.  Normally based on the command that this is responding to.  See the response code details below.\\
\hline
 Data Length&1&Length (in bytes) of the data payload of the response.  Any value from 0-253 is valid, but depends on what the expected response requires.\\
\hline
 Data&\textit{data length}&The byte string being returned.  This is not included for a simple acknowledge message.\\
\hline
 Checksum&1&An XOR checksum of the response packet.\\
\end{tabular}

\section{Response Codes}
As was stated in the above table the response code is normally just the command code that the response belongs to.  However there are several exceptions to this.  The simplest is the error response.  If an error occurs (e.g. the wrong number of parameters are provided for a command or the command does not do anything) an error packet is sent back to the host.  The response code in this case is the command code with bit 6 set (i.e. a bitwise and with 0x40).  Hence if command 0x0A encounters an error, the response code would be 0x4A.

In cases where the error could cause corruption of the command code or the code was invalid the PIC will never send an un-defined code, instead it responds with a special code with bit 7 set (0x80-0xFF).  For example if the checksum fails, the error may be in the command, so it is not sent back to the PC, instead 0x80 is used.  These `special' responses are in the special column of the error codes table below.

\section{Command Codes}
There are 32 command codes numbered sequentially from 0 to 31.  If a command is listed as `Unused' then it will respond with an ``Unused Command'' error packet.  The parameters are what is transmitted in the payload of the packet, in the order listed.  Addresses are transmitted Big Endian (i.e. high byte first).  The Mnemonic field is a simple text string representing the value for clarity of code, this is what is included in the seriallib Python library for example.

\subsection{Summary}
\begin{tabular}{|r|l|p{3cm}|p{4.5cm}|}
\hline
 \textbf{Code}&\textbf{Mnemonic}&\textbf{Description}&\textbf{Parameters}\\
\hline
 0&None&Reserved&\\
\hline
 1&None&Unused&\\
\hline
 2&RDMEM&Read Mem&Address High (1 Byte)\\
&&&Address Low (1 Byte)\\
\hline
 3&WRMEM&Write Mem&Address High (1 Byte)\\
&&&Address Low (1 Byte)\\
&&&Data (1 Byte)\\
\hline
 4&RDMEMBLK&Block Mem Read&Start Address High (1 Byte)\\
&&&Start Address Low (1 Byte)\\
&&&Length (1 Byte)\\
\hline
 5&WRMEMBLK&Block Mem Write&Start Address High (1 Byte)\\
&&&Start Address Low (1 Byte)\\
&&&Data Block (\textit{Length}-2 Bytes)\\
\hline
 6&RDIO&Read IO&Address High (1 Byte)\\
&&&Address Low (1 Byte)\\
\hline
 7&WRIO&Write IO&Address High (1 Byte)\\
&&&Address Low (1 Byte)\\
&&&Data Byte (1 Byte)\\
\hline
 8&UPDBIOS&Update BIOS&Start Address High (1 Byte)\\
&&&Start Address Low (1 Byte)\\
&&&Data (128 Bytes)\\ 
\hline
 9&DOCMD&Do Command&Command code (1 Byte)\\
\hline
 10&None&Unused&\\
\hline
 11&None&Unused&\\
\hline
 12&None&Unused&\\
\hline
 13&None&Unused&\\
\hline
 14&None&Unused&\\
\hline
 15&None&Unused&\\
\hline
 16&None&Unused&\\
\hline
 17&None&Unused&\\
\hline
 18&None&Unused&\\
\hline
 19&None&Unused&\\
\hline
 20&None&Unused&\\
\hline
 21&None&Unused&\\
\hline
 22&None&Unused&\\
\hline
 23&None&Unused&\\
\hline
 24&None&Unused&\\
\hline
 25&None&Unused&\\
\hline
 26&None&Unused&\\
\hline
 27&None&Unused&\\
\hline
 28&None&Unused&\\
\hline
 29&None&Unused&\\
\hline
 30&None&Unused&\\
\hline
 31&None&Unused&\\
\hline
\end{tabular}

\subsection{Mem Block Write}
The memory block write command writes a block of data to the main memory at the location specified in the command.  The first data byte specifies the upper address byte for the start point, and the second is the lower address byte.  The rest of the data bytes (the packet length field - 2) are then written to memory starting at this address, so a total of 251 bytes may be written in one go.  The address is incremented after each write so the byte order for the frame is little endian, this is opposite to the address byte order.

\subsection{BIOS Update}
The Z80 BIOS is stored in the PIC's internal Flash memory and copied to the system at boot.  The BIOS can be updated through the PIC's debug serial port without re-programming the whole PIC firmware.  This is done in chunks of 128 bytes.  There is no requirement to update all 8K of the BIOS image at the same time, nor do you have to do it in any particular order.  Each 128 byte block must be aligned at a 128 byte offset (i.e. bits <6:0> of the address need to be 0).  The address is the address within the BIOS itself, the PIC will automatically redirect writes to the appropriate part of Flash, so an address in the range 0x0000-0x1F80 is valid. On successful write of the block an ACK will be sent, if the parameters given are not acceptable various error messages may be produced (see below).  If the write fails verification, a 0x0007 error message is sent.  In this case simply try this block again as the BIOS storage space doesn't affect the PICs operation in anyway the debug kernel cannot be damaged by a failed BIOS update.  Operation of the Z80 if a reset is performed is likely to go wrong.

\subsection{Do Command}
The Do Command instruction is a special instruction which is used for executing simple no-data instructions, e.g. reset.  The packet contains a single data byte which is the name of the instruction to execute (there are up to 256 instructions 0x00-0xFF).  The response is simply the same packet, or an error code, none of the ``Do'' subset of commands can reply with any data.

\begin{tabular}{|r|l|p{7cm}|}
 \hline
 \textbf{Do Code}&\textbf{Mnemonic}&\textbf{Description}\\
 \hline
 0&None&Reserved\\
 \hline
 1&DOGETRST&Pull Z80 Reset line low until further notice.\\
 \hline
 2&DOGETDMA&Put the Z80 into DMA slave mode until further notice.\\
 \hline
 3&DOGETSLA&Release the Z80 into normal run mode, make the PIC a slave device.\\
 \hline
 4&DORST&Issue a software Reset to the PIC.  Resets the whole system, wiping RAM and re-bootin the Z80 from the stored ROM image.\\
 \hline
 Other&None&Not defined, will return Error 9.\\
 \hline
\end{tabular}

\section{Error Messages}
The minimum length for an error packet is 2 Bytes.  The first two bytes of the error packet are always an error code to indicate what the problem is.  In some cases where more information is available this is included after the error number, for example if the wrong number of bytes were sent with the command the number of bytes expected is specified in the response packet.  The error codes are specified below, in the error packet the high byte of the error code comes first (directly after the length field) followed by the low byte.

\begin{tabular}{|r|c|p{3.7cm}|p{3.7cm}|}
\hline
\textbf{Code}&\textbf{Special}&\textbf{Description}&\textbf{Additional Data}\\
\hline
0&&No error&None\\
\hline
1&0x80&Checksum Error&The checksum calculated by the PIC (1 Byte)\\
\hline
2&0x81&Bad Command (greater than 31)&The code the PIC received.\\
\hline
3&&Unused Command&\\
\hline
4&&Wrong number of parameters&The correct number for this command.\\
\hline
5&&The requested data is too big for one packet&\\
\hline
6&&The start address for BIOS update was not within a valid range (max 0x1FFF)&\\
\hline
7&&The offset for the BIOS was not aligned to the 128 byte packet size.&\\
\hline
8&&There was a verification error for this BIOS update.&\\
\hline
9&&Unknown do command.&The unknown command.\\
\hline
\end{tabular}

\section{seriallib.py}
\texttt{seriallib.py} is a Python library which automates a lot of the basic processing functions of the protocol.  Include it in a project by placing a copy in your Python path, or in the project folder then adding the line \texttt{include seriallib}.  Within the library are constants to save remembering the numerical values of commands e.g. typing \texttt{seriallib.DOCMD} will be treated as an integer of value 9 (the command code for a Do Command packet).  The rest of the fucntionality is wrapped in classes.

\subsection{Packet}
The Packet class is a representation of the packet type which automates length calculation and checksum generation whilst maintaining the flexibility of a string.  Specific bytes can be read from it as from a string using subscripting e.g. the length of the packet may be retreived as a character type from a packet \texttt{pkt} by subscripting byte 1; \texttt{pkt[1]}.  Other string like functions that work with the packet are \texttt{len()} which returns the total byte length of the packet (including command, length and checksum bytes, so the number is equal to the length field + 3).  Calling \texttt{str()} on the packet will return the byte string in a binary form i.e. there may be non-printable characters within it.  This is the default representation used if you \texttt{print} the packet.  To gain a more useful insight into the contents of the packet, calling \texttt{repr()} on it will return the whole packet as 2 digit, zero padded hexadecimal values separated by spaces, so for example a Do Get Reset command would appear as \texttt{09 01 01 09}.

\subsubsection{Assigning Packet Values}
There are two ways to assemble a packet using the \texttt{Packet} class.  The best way for assembling a packet to transmit is by calling the \texttt{set\_command} and \texttt{set\_data} methods.  \texttt{set\_command} expects an integer between 0 and 31 which it will validate and convert to a byte for transmission, this is ideal for use with the constants declared to make code more readable.  The \texttt{set\_data} command expects a string which does not need to be printable characters, this forms the data payload of the packet un-altered.  If you pass a small integer (less than 256) to \texttt{set\_data} it will convert it to a single character.  This is useful for using the Do Command integer constants, if a larger number is given it will produce an error.  Note that \texttt{set\_data} does not append to existing data so you cannot build a packet a bit at a time using this method.  You do not need to set the checksum or length values as these are calculated when needed.

The other method of generating a \texttt{Packet} is using the \texttt{set\_string} method.  This takes one argument which is a byte string that is interpreted as a packet.  When you assign data this way the checksum and length fields are validated to ensure this was a valid packet, then the bytes are assigned to the internal storage.  You can then alter the command or data with the \texttt{set\_command} or \texttt{set\_data} methods, or print the packet etc.  Much more useful in the case of a received packet is the ability to get a readable error message from it.  The \texttt{Packet} class knows all the error codes and what data is returned with that type of error and will wrap this information up in a hopefully descriptive message.  This error description can be aquired with the \texttt{get\_error} method.  This returns a tuple, the first element is an integer giving the error code, the second element is a descriptive string.  The error code matches the codes presented here, where 0 is no error and higher numbers correspond to specific communications or system events.  A useful test for an error is to perform an if on element 0 of the response
\begin{verbatim}
 if pkt.get_error()[0] > 0:
    print "There was an error"
    print "  Code %d: %s" % pkt.get_error()
\end{verbatim}

\chapter{Z80 BIOS Routines}
The following routines are built into the Z80 bios.  If they are documented here
then they should be safe to call from external code.  Where this is not so, the
restrictions are noted in the description.  Functions will not alter registers
(other than A and F) unless these registers are specified as inputs or outputs.

The sources is split into a number of files which are roughly split based on the
hardware they interface to (e.g. UART, RTC etc.) or a specific duty within the
software (e.g. maths).  The filename and linenumber of the jumplabel are stated
at the start of each function description.

\input{z80_functions}
\end{document}
